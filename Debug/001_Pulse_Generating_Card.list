
001_Pulse_Generating_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002848  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  08002af8  08002af8  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af8  08002af8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08002b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000f8  08002bf8  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08002bf8  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b18  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0a  00000000  00000000  00022c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00023848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  00023b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c23  00000000  00000000  00023d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003335  00000000  00000000  00026973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a329  00000000  00000000  00029ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00033fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001038  00000000  00000000  00034024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000f8 	.word	0x200000f8
 800014c:	00000000 	.word	0x00000000
 8000150:	08002960 	.word	0x08002960

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000fc 	.word	0x200000fc
 800016c:	08002960 	.word	0x08002960

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__gesf2>:
 8000d30:	f04f 3cff 	mov.w	ip, #4294967295
 8000d34:	e006      	b.n	8000d44 <__cmpsf2+0x4>
 8000d36:	bf00      	nop

08000d38 <__lesf2>:
 8000d38:	f04f 0c01 	mov.w	ip, #1
 8000d3c:	e002      	b.n	8000d44 <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__cmpsf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d011      	beq.n	8000d80 <__cmpsf2+0x40>
 8000d5c:	b001      	add	sp, #4
 8000d5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d62:	bf18      	it	ne
 8000d64:	ea90 0f01 	teqne	r0, r1
 8000d68:	bf58      	it	pl
 8000d6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d6e:	bf88      	it	hi
 8000d70:	17c8      	asrhi	r0, r1, #31
 8000d72:	bf38      	it	cc
 8000d74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d78:	bf18      	it	ne
 8000d7a:	f040 0001 	orrne.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	d102      	bne.n	8000d8c <__cmpsf2+0x4c>
 8000d86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8a:	d105      	bne.n	8000d98 <__cmpsf2+0x58>
 8000d8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d90:	d1e4      	bne.n	8000d5c <__cmpsf2+0x1c>
 8000d92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d96:	d0e1      	beq.n	8000d5c <__cmpsf2+0x1c>
 8000d98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__aeabi_cfrcmple>:
 8000da0:	4684      	mov	ip, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4661      	mov	r1, ip
 8000da6:	e7ff      	b.n	8000da8 <__aeabi_cfcmpeq>

08000da8 <__aeabi_cfcmpeq>:
 8000da8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000daa:	f7ff ffc9 	bl	8000d40 <__cmpsf2>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	bf48      	it	mi
 8000db2:	f110 0f00 	cmnmi.w	r0, #0
 8000db6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000db8 <__aeabi_fcmpeq>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff fff4 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2001      	moveq	r0, #1
 8000dc4:	2000      	movne	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmplt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffea 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmple>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffe0 	bl	8000da8 <__aeabi_cfcmpeq>
 8000de8:	bf94      	ite	ls
 8000dea:	2001      	movls	r0, #1
 8000dec:	2000      	movhi	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmpge>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffd2 	bl	8000da0 <__aeabi_cfrcmple>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpgt>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffc8 	bl	8000da0 <__aeabi_cfrcmple>
 8000e10:	bf34      	ite	cc
 8000e12:	2001      	movcc	r0, #1
 8000e14:	2000      	movcs	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_f2iz>:
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e24:	d30f      	bcc.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_f2iz+0x30>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e40:	bf18      	it	ne
 8000e42:	4240      	negne	r0, r0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2iz+0x3a>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d105      	bne.n	8000e62 <__aeabi_f2iz+0x46>
 8000e56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_f2uiz>:
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	d20e      	bcs.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e70:	d30b      	bcc.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e7a:	d409      	bmi.n	8000e90 <__aeabi_f2uiz+0x28>
 8000e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e84:	fa23 f002 	lsr.w	r0, r3, r2
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr
 8000e90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e94:	d101      	bne.n	8000e9a <__aeabi_f2uiz+0x32>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d102      	bne.n	8000ea0 <__aeabi_f2uiz+0x38>
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <clock_Init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <clock_Init+0x5c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	78db      	ldrb	r3, [r3, #3]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8bc 	bl	8001030 <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <clock_Init+0x5c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	791b      	ldrb	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8d0 	bl	8001064 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <clock_Init+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	795b      	ldrb	r3, [r3, #5]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f8e4 	bl	8001098 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <clock_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	789a      	ldrb	r2, [r3, #2]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <clock_Init+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f87c 	bl	8000fdc <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <clock_Init+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f80c 	bl	8000f08 <system_clock_set>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f000 f8eb 	bl	80010cc <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8000ef6:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8000efa:	f000 f8f9 	bl	80010f0 <apb1_peripheral_clock_en>

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d11f      	bne.n	8000f5c <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <system_clock_set+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <system_clock_set+0xd0>)
 8000f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8000f28:	bf00      	nop
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <system_clock_set+0xd0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <system_clock_set+0xd0>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <system_clock_set+0xd0>)
 8000f3c:	f023 0303 	bic.w	r3, r3, #3
 8000f40:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <system_clock_set+0xd0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <system_clock_set+0xd0>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <system_clock_set+0xd0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <system_clock_set+0xd0>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e037      	b.n	8000fcc <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d117      	bne.n	8000f92 <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <system_clock_set+0xd0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <system_clock_set+0xd0>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8000f6e:	bf00      	nop
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <system_clock_set+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f9      	beq.n	8000f70 <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <system_clock_set+0xd0>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <system_clock_set+0xd0>)
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <system_clock_set+0xd0>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <system_clock_set+0xd0>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	6053      	str	r3, [r2, #4]
 8000f90:	e01c      	b.n	8000fcc <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d119      	bne.n	8000fcc <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <system_clock_set+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <system_clock_set+0xd0>)
 8000f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa2:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8000fa4:	bf00      	nop
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <system_clock_set+0xd0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f9      	beq.n	8000fa6 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <system_clock_set+0xd0>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <system_clock_set+0xd0>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8000fbe:	bf00      	nop
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <system_clock_set+0xd0>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d1f9      	bne.n	8000fc0 <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <pll_clk_config+0x50>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <pll_clk_config+0x50>)
 8000ff2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ff6:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <pll_clk_config+0x50>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	79ba      	ldrb	r2, [r7, #6]
 8000ffe:	0492      	lsls	r2, r2, #18
 8001000:	4611      	mov	r1, r2
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <pll_clk_config+0x50>)
 8001004:	430b      	orrs	r3, r1
 8001006:	6053      	str	r3, [r2, #4]
	 RCC->CFGR &= ~(1 << 16);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <pll_clk_config+0x50>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <pll_clk_config+0x50>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <pll_clk_config+0x50>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4904      	ldr	r1, [pc, #16]	; (800102c <pll_clk_config+0x50>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
     return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <ahb_clk_set+0x30>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <ahb_clk_set+0x30>)
 8001040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001044:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <ahb_clk_set+0x30>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	4611      	mov	r1, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <ahb_clk_set+0x30>)
 8001052:	430b      	orrs	r3, r1
 8001054:	6053      	str	r3, [r2, #4]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000

08001064 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <apb1_clk_set+0x30>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <apb1_clk_set+0x30>)
 8001074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001078:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <apb1_clk_set+0x30>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	4611      	mov	r1, r2
 8001084:	4a03      	ldr	r2, [pc, #12]	; (8001094 <apb1_clk_set+0x30>)
 8001086:	430b      	orrs	r3, r1
 8001088:	6053      	str	r3, [r2, #4]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <apb2_clk_set+0x30>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <apb2_clk_set+0x30>)
 80010a8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80010ac:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <apb2_clk_set+0x30>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	02d2      	lsls	r2, r2, #11
 80010b6:	4611      	mov	r1, r2
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <apb2_clk_set+0x30>)
 80010ba:	430b      	orrs	r3, r1
 80010bc:	6053      	str	r3, [r2, #4]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000

080010cc <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <apb2_peripheral_clock_en+0x20>)
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	4904      	ldr	r1, [pc, #16]	; (80010ec <apb2_peripheral_clock_en+0x20>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	618b      	str	r3, [r1, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <apb1_peripheral_clock_en+0x20>)
 80010fa:	69da      	ldr	r2, [r3, #28]
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <apb1_peripheral_clock_en+0x20>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	61cb      	str	r3, [r1, #28]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <apb_get_clock+0xe4>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 800112c:	7cfb      	ldrb	r3, [r7, #19]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <apb_get_clock+0xe8>)
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e011      	b.n	800115c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8001138:	7cfb      	ldrb	r3, [r7, #19]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <apb_get_clock+0xe8>)
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e00b      	b.n	800115c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8001144:	7cfb      	ldrb	r3, [r7, #19]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d103      	bne.n	8001152 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 800114a:	f000 f85d 	bl	8001208 <get_pll_clock>
 800114e:	61f8      	str	r0, [r7, #28]
 8001150:	e004      	b.n	800115c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8001152:	7cfb      	ldrb	r3, [r7, #19]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d101      	bne.n	800115c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <apb_get_clock+0xe4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d802      	bhi.n	8001174 <apb_get_clock+0x60>
	{
		ahbp = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	e005      	b.n	8001180 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3b08      	subs	r3, #8
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <apb_get_clock+0xec>)
 800117a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117e:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d114      	bne.n	80011b0 <apb_get_clock+0x9c>
	{
		temp = ((RCC->CFGR >> 10) && 0x7);
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <apb_get_clock+0xe4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	0a9b      	lsrs	r3, r3, #10
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d802      	bhi.n	80011a4 <apb_get_clock+0x90>
		{
			apbp = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e005      	b.n	80011b0 <apb_get_clock+0x9c>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b04      	subs	r3, #4
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <apb_get_clock+0xf0>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d114      	bne.n	80011e0 <apb_get_clock+0xcc>
	{
		temp = ((RCC->CFGR >> 13) && 0x7);
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <apb_get_clock+0xe4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0b5b      	lsrs	r3, r3, #13
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d802      	bhi.n	80011d4 <apb_get_clock+0xc0>
		{
			apbp = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e005      	b.n	80011e0 <apb_get_clock+0xcc>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b04      	subs	r3, #4
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <apb_get_clock+0xf0>)
 80011da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011de:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3

}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	007a1200 	.word	0x007a1200
 8001200:	2000000c 	.word	0x2000000c
 8001204:	2000001c 	.word	0x2000001c

08001208 <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <get_pll_clock+0x74>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	0c1b      	lsrs	r3, r3, #16
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <get_pll_clock+0x74>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <get_pll_clock+0x74>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	0c5b      	lsrs	r3, r3, #17
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <get_pll_clock+0x78>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <get_pll_clock+0x7c>)
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e00e      	b.n	8001270 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10b      	bne.n	8001270 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <get_pll_clock+0x80>)
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4907      	ldr	r1, [pc, #28]	; (8001280 <get_pll_clock+0x78>)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	440a      	add	r2, r1
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 8001270:	68fb      	ldr	r3, [r7, #12]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	20000024 	.word	0x20000024
 8001284:	003d0900 	.word	0x003d0900
 8001288:	007a1200 	.word	0x007a1200

0800128c <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	b2db      	uxtb	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <io_init>:
	}
}


void io_init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 80012ce:	2302      	movs	r3, #2
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e00b      	b.n	80012ec <io_init+0x24>
	{
		io_config(io,&io_initial_config[io]);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4a08      	ldr	r2, [pc, #32]	; (80012fc <io_init+0x34>)
 80012da:	441a      	add	r2, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f80d 	bl	8001300 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3301      	adds	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b30      	cmp	r3, #48	; 0x30
 80012f0:	d9f0      	bls.n	80012d4 <io_init+0xc>
	}
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000034 	.word	0x20000034

08001300 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	785a      	ldrb	r2, [r3, #1]
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f804 	bl	8001324 <io_set_io_mode>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	460b      	mov	r3, r1
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	717b      	strb	r3, [r7, #5]
	//PortNumber = io_port(io);
	pin = io_pin_bit(io);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffb7 	bl	80012ac <io_pin_bit>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <io_set_io_mode+0xd0>)
 8001344:	701a      	strb	r2, [r3, #0]
	//GPIO_RegDef_t *Port;
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff9f 	bl	800128c <io_port>
 800134e:	4603      	mov	r3, r0
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001356:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800135a:	60fb      	str	r3, [r7, #12]
	if (pin < 8)
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <io_set_io_mode+0xd0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d81e      	bhi.n	80013a2 <io_set_io_mode+0x7e>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <io_set_io_mode+0xd0>)
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	210f      	movs	r1, #15
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	43d2      	mvns	r2, r2
 8001376:	401a      	ands	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	79b9      	ldrb	r1, [r7, #6]
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <io_set_io_mode+0xd0>)
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4091      	lsls	r1, r2
 800138a:	7978      	ldrb	r0, [r7, #5]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <io_set_io_mode+0xd0>)
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	3202      	adds	r2, #2
 8001394:	fa00 f202 	lsl.w	r2, r0, r2
 8001398:	430a      	orrs	r2, r1
 800139a:	431a      	orrs	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 80013a0:	e024      	b.n	80013ec <io_set_io_mode+0xc8>
		pin %= 8;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <io_set_io_mode+0xd0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <io_set_io_mode+0xd0>)
 80013ae:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <io_set_io_mode+0xd0>)
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	210f      	movs	r1, #15
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	401a      	ands	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	79b9      	ldrb	r1, [r7, #6]
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <io_set_io_mode+0xd0>)
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4091      	lsls	r1, r2
 80013d6:	7978      	ldrb	r0, [r7, #5]
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <io_set_io_mode+0xd0>)
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	3202      	adds	r2, #2
 80013e0:	fa00 f202 	lsl.w	r2, r0, r2
 80013e4:	430a      	orrs	r2, r1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000115 	.word	0x20000115

080013f8 <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
	//PortNumber = io_port(io);
	//pin = io_pin_bit(io);
	//GPIO_RegDef_t *Port;
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff3e 	bl	800128c <io_port>
 8001410:	4603      	mov	r3, r0
 8001412:	029b      	lsls	r3, r3, #10
 8001414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001418:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800141c:	60fb      	str	r3, [r7, #12]
	switch(out){
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <io_set_out+0x4e>
 8001424:	2b01      	cmp	r3, #1
 8001426:	d11d      	bne.n	8001464 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff3e 	bl	80012ac <io_pin_bit>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	2301      	movs	r3, #1
 8001436:	4093      	lsls	r3, r2
 8001438:	43da      	mvns	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	401a      	ands	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	60da      	str	r2, [r3, #12]
		break;
 8001444:	e00e      	b.n	8001464 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff2f 	bl	80012ac <io_pin_bit>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	fa03 f202 	lsl.w	r2, r3, r2
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	60da      	str	r2, [r3, #12]
		break;
 8001462:	bf00      	nop
	}
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <io_get_in>:

uint16_t io_get_in(io_e io)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]

	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff07 	bl	800128c <io_port>
 800147e:	4603      	mov	r3, r0
 8001480:	029b      	lsls	r3, r3, #10
 8001482:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001486:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800148a:	60fb      	str	r3, [r7, #12]
	return (Port->IDR & (1 << io_pin_bit(io)));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	b29c      	uxth	r4, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff09 	bl	80012ac <io_pin_bit>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	2301      	movs	r3, #1
 80014a0:	4093      	lsls	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4023      	ands	r3, r4
 80014a6:	b29b      	uxth	r3, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}

080014b0 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1 << 4))
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <EXTI4_IRQHandler+0x48>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d018      	beq.n	80014f2 <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <EXTI4_IRQHandler+0x48>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <EXTI4_IRQHandler+0x48>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <EXTI4_IRQHandler+0x4c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 80014d4:	2100      	movs	r1, #0
 80014d6:	202d      	movs	r0, #45	; 0x2d
 80014d8:	f7ff ff8e 	bl	80013f8 <io_set_out>
			flag_led_on = 1;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <EXTI4_IRQHandler+0x4c>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
			LED_OFF();
			flag_led_on = 0;
		}
	}

}
 80014e2:	e006      	b.n	80014f2 <EXTI4_IRQHandler+0x42>
			LED_OFF();
 80014e4:	2101      	movs	r1, #1
 80014e6:	202d      	movs	r0, #45	; 0x2d
 80014e8:	f7ff ff86 	bl	80013f8 <io_set_out>
			flag_led_on = 0;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <EXTI4_IRQHandler+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40010400 	.word	0x40010400
 80014fc:	20000114 	.word	0x20000114

08001500 <I2C_Init>:
#define I2C_CR1_ACK	  (1 << 10)
#define I2C_CR1_STP   (1 << 9)
#define I2C_SR1_TXE	  (1 << 7)
#define I2C_SR1_RXNE  (1 << 6)
void I2C_Init(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	// Clock to I2C
		// Done in Clk.c
	// Alternate function of pin as open drain
		// Done in Gpio.c
	// Periphral input clock in CR2
	I2C2->CR1 |= (1 << 15); //I2C Reset
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <I2C_Init+0x7c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1c      	ldr	r2, [pc, #112]	; (800157c <I2C_Init+0x7c>)
 800150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150e:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~(1 << 15); //I2C Undo
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <I2C_Init+0x7c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <I2C_Init+0x7c>)
 8001516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800151a:	6013      	str	r3, [r2, #0]
	I2C2->CR2 &= ~(0x01F << 0);
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <I2C_Init+0x7c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <I2C_Init+0x7c>)
 8001522:	f023 031f 	bic.w	r3, r3, #31
 8001526:	6053      	str	r3, [r2, #4]
	I2C2->CR2 = (0x08 << 0); // 8 MZ
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <I2C_Init+0x7c>)
 800152a:	2208      	movs	r2, #8
 800152c:	605a      	str	r2, [r3, #4]
	// CCR
	I2C2->CCR &= ~(0xFFF << 0);
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <I2C_Init+0x7c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <I2C_Init+0x7c>)
 8001534:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001538:	f023 030f 	bic.w	r3, r3, #15
 800153c:	61d3      	str	r3, [r2, #28]
	I2C2->CCR |= (1 << 15);
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <I2C_Init+0x7c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <I2C_Init+0x7c>)
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	61d3      	str	r3, [r2, #28]
	I2C2->CCR |= (0x28 << 0); // Fast Mode
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <I2C_Init+0x7c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <I2C_Init+0x7c>)
 8001550:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001554:	61d3      	str	r3, [r2, #28]
	//I2C2->CCR = 0x2d;
	// Rise time
	I2C2->TRISE = 0x03;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <I2C_Init+0x7c>)
 8001558:	2203      	movs	r2, #3
 800155a:	621a      	str	r2, [r3, #32]
	//I2C2->TRISE = 0x09;
	// CR1 to Enable I2C
	I2C2->CR1 |= (1 << 10); // Enable the ACK bits
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <I2C_Init+0x7c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <I2C_Init+0x7c>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
	//I2C2->CR2 |= (1 << 8);
	//I2C2->CR2 |= (1 << 9); // Enable the event interrupt

	I2C2->CR1 |= (1 << 0);
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <I2C_Init+0x7c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <I2C_Init+0x7c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]
	//Send_Stop();
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40005800 	.word	0x40005800

08001580 <nvic_en_irq>:
	*NVIC_ISER0 |= (1 << EXTI4_IRQn);
}


void nvic_en_irq(irqn_type irqn)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	uint8_t register_position = irqn / 32;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	095b      	lsrs	r3, r3, #5
 800158e:	73fb      	strb	r3, [r7, #15]
	uint8_t irq_position = irqn % 32;
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[register_position] = (1 << irq_position);
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f103 	lsl.w	r1, r2, r3
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <nvic_en_irq+0x34>)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <uart_x_configure_parameter>:
uint16_t logic_counter2 = 0;
uint16_t logic_counter3 = 0;
uint16_t logic_counter4 = 0;
uint16_t logic_counter5 = 0;
void uart_x_configure_parameter(usart_handle *p_usart_handle)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	p_usart_handle->add_of_usartx = USART2;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <uart_x_configure_parameter+0x44>)
 80015c4:	601a      	str	r2, [r3, #0]
	//USART2Handle.Usart_Configuration.Mode = USART_MODE_TXRX;
	p_usart_handle->usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	715a      	strb	r2, [r3, #5]
	p_usart_handle->usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	711a      	strb	r2, [r3, #4]
	p_usart_handle->usart_configuration.baudrate = USART_STD_BAUD_9600;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015d8:	609a      	str	r2, [r3, #8]
	p_usart_handle->usart_configuration.parity_control = USART_PARITY_DISABLE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
	//usart_2_handle.usart_configuration.DMA_transmitterEN = USARTx_DMA_TRANSMITTER_EN;
	//usart_2_handle.usart_configuration.DMA_ReceiverEN = USARTx_DMA_RECEIVER_DI;
	p_usart_handle->tx_buffer = &(tx_buffer_data[0]);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <uart_x_configure_parameter+0x48>)
 80015e4:	615a      	str	r2, [r3, #20]
	p_usart_handle->rx_buffer = &(rx_buffer_data[0]);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <uart_x_configure_parameter+0x4c>)
 80015ea:	619a      	str	r2, [r3, #24]
	p_usart_handle->rx_len = 8;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2208      	movs	r2, #8
 80015f0:	775a      	strb	r2, [r3, #29]

}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40004400 	.word	0x40004400
 8001600:	20000148 	.word	0x20000148
 8001604:	20000198 	.word	0x20000198

08001608 <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	795b      	ldrb	r3, [r3, #5]
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f000 f8f3 	bl	8001806 <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f000 f903 	bl	8001836 <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f000 f90c 	bl	800185a <config_parity>

	//config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f000 f809 	bl	8001664 <usart_set_baudrate>

	usart_en(p_usart_handle->add_of_usartx);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f8c6 	bl	80017e8 <usart_en>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fd50 	bl	8001114 <apb_get_clock>
 8001674:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7fe ff70 	bl	800055c <__aeabi_ui2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7fe ff6b 	bl	800055c <__aeabi_ui2d>
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <usart_set_baudrate+0xc0>)
 800168c:	f7fe ffe0 	bl	8000650 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7ff f904 	bl	80008a4 <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f9e6 	bl	8000a74 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 80016ac:	6938      	ldr	r0, [r7, #16]
 80016ae:	f7ff fbb5 	bl	8000e1c <__aeabi_f2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fae7 	bl	8000c88 <__aeabi_i2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	6938      	ldr	r0, [r7, #16]
 80016c0:	f7ff fa2c 	bl	8000b1c <__aeabi_fsub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f7ff fa26 	bl	8000b1c <__aeabi_fsub>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fbc8 	bl	8000e68 <__aeabi_f2uiz>
 80016d8:	4603      	mov	r3, r0
 80016da:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 80016dc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7fe fd45 	bl	8000170 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fa75 	bl	8001bd8 <round_off>
 80016ee:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	d904      	bls.n	8001700 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
	//p_usartx->BRR = 0x0D;
}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	40300000 	.word	0x40300000

08001728 <usart_write_polling>:

}


void usart_write_polling(usart_handle *p_usart_handle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint16_t *p_data;
	uint8_t temp_chara;
	usart_tx_en(p_usart_handle->add_of_usartx);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fa21 	bl	8001b7c <usart_tx_en>
	while (*p_usart_handle->tx_buffer != '\0')
 800173a:	e03d      	b.n	80017b8 <usart_write_polling+0x90>
	{
		// 8 bit data len
		// 9 bit data len
		while ( get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 0);
 800173c:	bf00      	nop
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f8a6 	bl	8001896 <get_flag_status>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f6      	beq.n	800173e <usart_write_polling+0x16>

		if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	791b      	ldrb	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d120      	bne.n	800179a <usart_write_polling+0x72>
		{
			// IF Parity DISABLED
			if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d110      	bne.n	8001782 <usart_write_polling+0x5a>
			{
				//*pData = buffer;
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint16_t)0x1FF);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	615a      	str	r2, [r3, #20]
				p_usart_handle->tx_buffer++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	e01a      	b.n	80017b8 <usart_write_polling+0x90>
			}
			// IF Parity ENABLED
			else
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint8_t)0xFF);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	e00e      	b.n	80017b8 <usart_write_polling+0x90>
			}
		}
		else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <usart_write_polling+0x90>
		{
			//p_usart_handle->add_of_usartx->DR = (*buffer & (uint8_t)0xFF);
			//temp_chara = (*buffer);
			// printable character anyhoe is 7-bits, So it doesnt matter if we handle the parity control.
			p_usart_handle->add_of_usartx->DR = *p_usart_handle->tx_buffer;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
			p_usart_handle->tx_buffer++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]
	while (*p_usart_handle->tx_buffer != '\0')
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1bc      	bne.n	800173c <usart_write_polling+0x14>



	}
	// Wait till TC Got completed
	while (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) != 1);
 80017c2:	bf00      	nop
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f863 	bl	8001896 <get_flag_status>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d1f6      	bne.n	80017c4 <usart_write_polling+0x9c>
	usart_tx_di(p_usart_handle->add_of_usartx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f9dd 	bl	8001b9a <usart_tx_di>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <usart_en>:
		}
	}
}

void usart_en(usartx_regdef_t* p_usartx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	0312      	lsls	r2, r2, #12
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	611a      	str	r2, [r3, #16]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	0312      	lsls	r2, r2, #12
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 8001878:	e008      	b.n	800188c <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d105      	bne.n	800188c <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <get_flag_status>:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
	uint8_t status;
	if (p_usartx->SR & flag)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <get_flag_status+0x1c>
	{
		return 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 80018b2:	2300      	movs	r3, #0
	}
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <usart_interrupt_based_transmit>:

void usart_interrupt_based_transmit(usart_handle *p_usart_handle)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	usart_write_interrupt(p_usart_handle->add_of_usartx);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f809 	bl	80018e2 <usart_write_interrupt>
	usart_tx_en(p_usart_handle->add_of_usartx);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f951 	bl	8001b7c <usart_tx_en>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <usart_write_interrupt>:

void usart_write_interrupt(usartx_regdef_t *p_usartx)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_TXE_INTEERUPT_EN)| (1 << USART_CR1_TC_INTERRUPT_EN);// | (1 << USART_CR1_TC_INTERRUPT_EN) );
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60da      	str	r2, [r3, #12]
	nvic_en_irq(USART2_Global_IRQn);
 80018f6:	2026      	movs	r0, #38	; 0x26
 80018f8:	f7ff fe42 	bl	8001580 <nvic_en_irq>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <usart_interrupt_handling>:

}


void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
		// if yes then clear this flag
		// TO DO: can be used for the changing the status of the USART.

	}
	*/
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2140      	movs	r1, #64	; 0x40
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ffbf 	bl	8001896 <get_flag_status>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d13a      	bne.n	8001994 <usart_interrupt_handling+0x90>
	{
		tc_counter++;
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <usart_interrupt_handling+0x24c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <usart_interrupt_handling+0x24c>)
 8001928:	701a      	strb	r2, [r3, #0]
		logic_counter4++;
 800192a:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <usart_interrupt_handling+0x250>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <usart_interrupt_handling+0x250>)
 8001934:	801a      	strh	r2, [r3, #0]
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <usart_interrupt_handling+0x254>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	b2c8      	uxtb	r0, r1
 8001942:	4985      	ldr	r1, [pc, #532]	; (8001b58 <usart_interrupt_handling+0x254>)
 8001944:	7008      	strb	r0, [r1, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <usart_interrupt_handling+0x258>)
 800194c:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11d      	bne.n	8001994 <usart_interrupt_handling+0x90>
		{
			logic_counter5++;
 8001958:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <usart_interrupt_handling+0x25c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b7f      	ldr	r3, [pc, #508]	; (8001b60 <usart_interrupt_handling+0x25c>)
 8001962:	801a      	strh	r2, [r3, #0]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001972:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001982:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0208 	bic.w	r2, r2, #8
 8001992:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff7b 	bl	8001896 <get_flag_status>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d16a      	bne.n	8001a7c <usart_interrupt_handling+0x178>
	{
		txe_counter++;
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <usart_interrupt_handling+0x260>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <usart_interrupt_handling+0x260>)
 80019b0:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <usart_interrupt_handling+0x264>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	b2c8      	uxtb	r0, r1
 80019be:	496a      	ldr	r1, [pc, #424]	; (8001b68 <usart_interrupt_handling+0x264>)
 80019c0:	7008      	strb	r0, [r1, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <usart_interrupt_handling+0x268>)
 80019c8:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d045      	beq.n	8001a60 <usart_interrupt_handling+0x15c>
		{
			logic_counter1++;
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <usart_interrupt_handling+0x26c>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <usart_interrupt_handling+0x26c>)
 80019de:	801a      	strh	r2, [r3, #0]
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d125      	bne.n	8001a34 <usart_interrupt_handling+0x130>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d115      	bne.n	8001a1c <usart_interrupt_handling+0x118>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a04:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	e02f      	b.n	8001a7c <usart_interrupt_handling+0x178>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	615a      	str	r2, [r3, #20]
 8001a32:	e023      	b.n	8001a7c <usart_interrupt_handling+0x178>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	791b      	ldrb	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11f      	bne.n	8001a7c <usart_interrupt_handling+0x178>
			{
				//temp_Storage = *p_usart_handle->TxBuffer;
				//chara = *p_usart_handle->TxBuffer;
				logic_counter2++;
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <usart_interrupt_handling+0x270>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <usart_interrupt_handling+0x270>)
 8001a46:	801a      	strh	r2, [r3, #0]
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	e00d      	b.n	8001a7c <usart_interrupt_handling+0x178>
			}
		}
		else
		{
			//while(!get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC));
			logic_counter3++;
 8001a60:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <usart_interrupt_handling+0x274>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <usart_interrupt_handling+0x274>)
 8001a6a:	801a      	strh	r2, [r3, #0]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a7a:	60da      	str	r2, [r3, #12]
			//p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
			//p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2120      	movs	r1, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff07 	bl	8001896 <get_flag_status>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d15b      	bne.n	8001b46 <usart_interrupt_handling+0x242>
	{
		if (p_usart_handle->rx_len > 0)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f5b      	ldrb	r3, [r3, #29]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04b      	beq.n	8001b2e <usart_interrupt_handling+0x22a>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d125      	bne.n	8001aea <usart_interrupt_handling+0x1e6>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d114      	bne.n	8001ad0 <usart_interrupt_handling+0x1cc>
				{
					*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
		else if (p_usart_handle->rx_len == 0)
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
		}
	}
}
 8001ace:	e03a      	b.n	8001b46 <usart_interrupt_handling+0x242>
					*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
}
 8001ae8:	e02d      	b.n	8001b46 <usart_interrupt_handling+0x242>
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d129      	bne.n	8001b46 <usart_interrupt_handling+0x242>
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <usart_interrupt_handling+0x210>
					*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	e018      	b.n	8001b46 <usart_interrupt_handling+0x242>
					*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	e00b      	b.n	8001b46 <usart_interrupt_handling+0x242>
		else if (p_usart_handle->rx_len == 0)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7f5b      	ldrb	r3, [r3, #29]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <usart_interrupt_handling+0x242>
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0220 	bic.w	r2, r2, #32
 8001b44:	60da      	str	r2, [r3, #12]
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000138 	.word	0x20000138
 8001b54:	20000140 	.word	0x20000140
 8001b58:	20000238 	.word	0x20000238
 8001b5c:	200001e8 	.word	0x200001e8
 8001b60:	20000142 	.word	0x20000142
 8001b64:	20000139 	.word	0x20000139
 8001b68:	2000028c 	.word	0x2000028c
 8001b6c:	2000023c 	.word	0x2000023c
 8001b70:	2000013a 	.word	0x2000013a
 8001b74:	2000013c 	.word	0x2000013c
 8001b78:	2000013e 	.word	0x2000013e

08001b7c <usart_tx_en>:

void usart_tx_en(usartx_regdef_t *p_usartx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f043 0208 	orr.w	r2, r3, #8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <usart_tx_di>:
{
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
}

void usart_tx_di(usartx_regdef_t *p_usartx)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f023 0208 	bic.w	r2, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <MCU_Init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void MCU_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	clock_Init();
 8001bbc:	f7ff f974 	bl	8000ea8 <clock_Init>
	io_init();
 8001bc0:	f7ff fb82 	bl	80012c8 <io_init>
	I2C_Init();
 8001bc4:	f7ff fc9c 	bl	8001500 <I2C_Init>
	usart_init(&usart_2_handle);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <MCU_Init+0x1c>)
 8001bca:	f7ff fd1d 	bl	8001608 <usart_init>


}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000118 	.word	0x20000118

08001bd8 <round_off>:

uint32_t round_off(float number)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	float temp1;
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff f91b 	bl	8000e1c <__aeabi_f2iz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff f916 	bl	8000e1c <__aeabi_f2iz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f848 	bl	8000c88 <__aeabi_i2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe ff8d 	bl	8000b1c <__aeabi_fsub>
 8001c02:	4603      	mov	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 8001c06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff f8de 	bl	8000dcc <__aeabi_fcmplt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <round_off+0x44>
	{
		carry = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	e009      	b.n	8001c30 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 8001c1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff f8e7 	bl	8000df4 <__aeabi_fcmpge>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <round_off+0x58>
	{
		carry = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 8001c30:	7dfa      	ldrb	r2, [r7, #23]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <main>:
uint8_t rx_buffer_data[80];
uint8_t tc_buffer[80],tc_buffer_index;
uint8_t txe_buffer[80],txe_buffer_index;

int main(void)
{
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af06      	add	r7, sp, #24
	 */
	//i = 0;

	extern uint8_t tc_counter,txe_counter,logic_counter1,logic_counter2,logic_counter3,logic_counter4,logic_counter5;
	//DMA1Handle.pDMAx = DMA1;
	uart_x_configure_parameter(&usart_2_handle);
 8001c46:	4882      	ldr	r0, [pc, #520]	; (8001e50 <main+0x210>)
 8001c48:	f7ff fcb6 	bl	80015b8 <uart_x_configure_parameter>
	MCU_Init();
 8001c4c:	f7ff ffb4 	bl	8001bb8 <MCU_Init>
	//usart_init(&usart_2_handle);
	uint32_t apb_clock_frequency = apb_get_clock(APB1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff fa5f 	bl	8001114 <apb_get_clock>
 8001c56:	60b8      	str	r0, [r7, #8]
	RCC->CFGR &= ~(0x04 << 24);
 8001c58:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <main+0x214>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a7d      	ldr	r2, [pc, #500]	; (8001e54 <main+0x214>)
 8001c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c62:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (0x04 << 24);
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <main+0x214>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <main+0x214>)
 8001c6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c6e:	6053      	str	r3, [r2, #4]

	//uint8_t string_to_send[25];
	//(*RCC).
	//Typedef_RCC* Address_Of_RCC = RCC;
	//Address_Of_RCC->APB1ENR |= 3;
	uint32_t temp_5 = usart_2_handle.tx_buffer;
 8001c70:	4b77      	ldr	r3, [pc, #476]	; (8001e50 <main+0x210>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	607b      	str	r3, [r7, #4]
	uint8_t temp = sprintf((char*)usart_2_handle.tx_buffer,"I AM THE BEST\r\n");
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <main+0x210>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4977      	ldr	r1, [pc, #476]	; (8001e58 <main+0x218>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f9f5 	bl	800206c <siprintf>
 8001c82:	4603      	mov	r3, r0
 8001c84:	70fb      	strb	r3, [r7, #3]
	//usart_2_handle.tx_buffer = &string_to_send;
	//uint32_t temp_6 = usart_2_handle.tx_buffer;
	//temp = sprintf((char*)string_to_send,"I");

	usart_interrupt_based_transmit(&usart_2_handle);
 8001c86:	4872      	ldr	r0, [pc, #456]	; (8001e50 <main+0x210>)
 8001c88:	f7ff fe19 	bl	80018be <usart_interrupt_based_transmit>
	uint8_t temp2 = temp;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	70bb      	strb	r3, [r7, #2]
	uint16_t input_data = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	803b      	strh	r3, [r7, #0]
	uint8_t flag_rising_edge = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
	//usart_write_polling(&usart_2_handle);
	while(1)
	{
		input_data = ((io_get_in(IO_SENSOR_IN_TEMP) >> 9) & 0x01);
 8001c98:	2009      	movs	r0, #9
 8001c9a:	f7ff fbe7 	bl	800146c <io_get_in>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	0a5b      	lsrs	r3, r3, #9
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	803b      	strh	r3, [r7, #0]
		// If input then Output the string
		if (flag_rising_edge){
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f3      	beq.n	8001c98 <main+0x58>
			if (input_data){
 8001cb0:	883b      	ldrh	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <main+0x58>
				flag_rising_edge = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
				sprintf((char*)usart_2_handle.tx_buffer,"TC_C:%.3u, TXE_C:%.3u LC_1:%.3u LC_2:%.3u LC_3:%.3u LC_4:%.3u LC_5:%.3u \r\n",tc_counter,txe_counter,logic_counter1,logic_counter2,logic_counter3,logic_counter4,logic_counter5);
 8001cba:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <main+0x210>)
 8001cbc:	6958      	ldr	r0, [r3, #20]
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <main+0x21c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461e      	mov	r6, r3
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <main+0x220>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	469c      	mov	ip, r3
 8001cca:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <main+0x224>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <main+0x228>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <main+0x22c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461c      	mov	r4, r3
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <main+0x230>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <main+0x234>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	9304      	str	r3, [sp, #16]
 8001ce8:	9503      	str	r5, [sp, #12]
 8001cea:	9402      	str	r4, [sp, #8]
 8001cec:	9101      	str	r1, [sp, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	4663      	mov	r3, ip
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4960      	ldr	r1, [pc, #384]	; (8001e78 <main+0x238>)
 8001cf6:	f000 f9b9 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001cfa:	4855      	ldr	r0, [pc, #340]	; (8001e50 <main+0x210>)
 8001cfc:	f7ff fd14 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"tc_buffer:%s",tc_buffer);
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <main+0x210>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <main+0x23c>)
 8001d06:	495e      	ldr	r1, [pc, #376]	; (8001e80 <main+0x240>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f9af 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d0e:	4850      	ldr	r0, [pc, #320]	; (8001e50 <main+0x210>)
 8001d10:	f7ff fd0a 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"\r\n");
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <main+0x210>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	495a      	ldr	r1, [pc, #360]	; (8001e84 <main+0x244>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9a6 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d20:	484b      	ldr	r0, [pc, #300]	; (8001e50 <main+0x210>)
 8001d22:	f7ff fd01 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe_buffer:%s",txe_buffer);
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <main+0x210>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <main+0x248>)
 8001d2c:	4957      	ldr	r1, [pc, #348]	; (8001e8c <main+0x24c>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f99c 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d34:	4846      	ldr	r0, [pc, #280]	; (8001e50 <main+0x210>)
 8001d36:	f7ff fcf7 	bl	8001728 <usart_write_polling>
				//sprintf((char*)usart_2_handle.tx_buffer,"\r\n");
				//usart_write_polling(&usart_2_handle);
				sprintf((char*)usart_2_handle.tx_buffer,"tc Buffer current Index:%d\r\n",tc_buffer_index);
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <main+0x210>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <main+0x250>)
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4954      	ldr	r1, [pc, #336]	; (8001e94 <main+0x254>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f991 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d4a:	4841      	ldr	r0, [pc, #260]	; (8001e50 <main+0x210>)
 8001d4c:	f7ff fcec 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"tc_buffer index:%d\r\n",tc_buffer[tc_buffer_index - 1]);
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <main+0x210>)
 8001d52:	6958      	ldr	r0, [r3, #20]
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <main+0x250>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <main+0x23c>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	494d      	ldr	r1, [pc, #308]	; (8001e98 <main+0x258>)
 8001d62:	f000 f983 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d66:	483a      	ldr	r0, [pc, #232]	; (8001e50 <main+0x210>)
 8001d68:	f7ff fcde 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer current Index:%d\r\n",txe_buffer_index);
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <main+0x210>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <main+0x25c>)
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	494a      	ldr	r1, [pc, #296]	; (8001ea0 <main+0x260>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f978 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d7c:	4834      	ldr	r0, [pc, #208]	; (8001e50 <main+0x210>)
 8001d7e:	f7ff fcd3 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer last character:%d,%d\r\n",txe_buffer[txe_buffer_index],txe_buffer_index);
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <main+0x210>)
 8001d84:	6958      	ldr	r0, [r3, #20]
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <main+0x25c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <main+0x248>)
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <main+0x25c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4943      	ldr	r1, [pc, #268]	; (8001ea4 <main+0x264>)
 8001d98:	f000 f968 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001d9c:	482c      	ldr	r0, [pc, #176]	; (8001e50 <main+0x210>)
 8001d9e:	f7ff fcc3 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer sec_last character:%d,%d\r\n",txe_buffer[txe_buffer_index - 1],(txe_buffer_index - 1) );
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <main+0x210>)
 8001da4:	6958      	ldr	r0, [r3, #20]
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <main+0x25c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4a36      	ldr	r2, [pc, #216]	; (8001e88 <main+0x248>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <main+0x25c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	493b      	ldr	r1, [pc, #236]	; (8001ea8 <main+0x268>)
 8001dba:	f000 f957 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001dbe:	4824      	ldr	r0, [pc, #144]	; (8001e50 <main+0x210>)
 8001dc0:	f7ff fcb2 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer third_last character:%d,%d\r\n",txe_buffer[txe_buffer_index - 2], (txe_buffer_index - 2));
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <main+0x210>)
 8001dc6:	6958      	ldr	r0, [r3, #20]
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <main+0x25c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3b02      	subs	r3, #2
 8001dce:	4a2e      	ldr	r2, [pc, #184]	; (8001e88 <main+0x248>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <main+0x25c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b02      	subs	r3, #2
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <main+0x26c>)
 8001ddc:	f000 f946 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001de0:	481b      	ldr	r0, [pc, #108]	; (8001e50 <main+0x210>)
 8001de2:	f7ff fca1 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer sec_last character:%d,%d\r\n",txe_buffer[txe_buffer_index - 3],(txe_buffer_index - 3) );
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <main+0x210>)
 8001de8:	6958      	ldr	r0, [r3, #20]
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <main+0x25c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3b03      	subs	r3, #3
 8001df0:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <main+0x248>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <main+0x25c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3b03      	subs	r3, #3
 8001dfc:	492a      	ldr	r1, [pc, #168]	; (8001ea8 <main+0x268>)
 8001dfe:	f000 f935 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001e02:	4813      	ldr	r0, [pc, #76]	; (8001e50 <main+0x210>)
 8001e04:	f7ff fc90 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer third_last character:%d,%d\r\n",txe_buffer[txe_buffer_index - 4], (txe_buffer_index - 4));
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <main+0x210>)
 8001e0a:	6958      	ldr	r0, [r3, #20]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <main+0x25c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b04      	subs	r3, #4
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <main+0x248>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <main+0x25c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3b04      	subs	r3, #4
 8001e1e:	4923      	ldr	r1, [pc, #140]	; (8001eac <main+0x26c>)
 8001e20:	f000 f924 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001e24:	480a      	ldr	r0, [pc, #40]	; (8001e50 <main+0x210>)
 8001e26:	f7ff fc7f 	bl	8001728 <usart_write_polling>
				sprintf((char*)usart_2_handle.tx_buffer,"txe Buffer third_last character:%d,%d\r\n",txe_buffer[txe_buffer_index - 5], (txe_buffer_index - 5));
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <main+0x210>)
 8001e2c:	6958      	ldr	r0, [r3, #20]
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <main+0x25c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3b05      	subs	r3, #5
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <main+0x248>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <main+0x25c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	491a      	ldr	r1, [pc, #104]	; (8001eac <main+0x26c>)
 8001e42:	f000 f913 	bl	800206c <siprintf>
				usart_write_polling(&usart_2_handle);
 8001e46:	4802      	ldr	r0, [pc, #8]	; (8001e50 <main+0x210>)
 8001e48:	f7ff fc6e 	bl	8001728 <usart_write_polling>
		input_data = ((io_get_in(IO_SENSOR_IN_TEMP) >> 9) & 0x01);
 8001e4c:	e724      	b.n	8001c98 <main+0x58>
 8001e4e:	bf00      	nop
 8001e50:	20000118 	.word	0x20000118
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08002978 	.word	0x08002978
 8001e5c:	20000138 	.word	0x20000138
 8001e60:	20000139 	.word	0x20000139
 8001e64:	2000013a 	.word	0x2000013a
 8001e68:	2000013c 	.word	0x2000013c
 8001e6c:	2000013e 	.word	0x2000013e
 8001e70:	20000140 	.word	0x20000140
 8001e74:	20000142 	.word	0x20000142
 8001e78:	08002988 	.word	0x08002988
 8001e7c:	200001e8 	.word	0x200001e8
 8001e80:	080029d4 	.word	0x080029d4
 8001e84:	080029e4 	.word	0x080029e4
 8001e88:	2000023c 	.word	0x2000023c
 8001e8c:	080029e8 	.word	0x080029e8
 8001e90:	20000238 	.word	0x20000238
 8001e94:	080029f8 	.word	0x080029f8
 8001e98:	08002a18 	.word	0x08002a18
 8001e9c:	2000028c 	.word	0x2000028c
 8001ea0:	08002a30 	.word	0x08002a30
 8001ea4:	08002a50 	.word	0x08002a50
 8001ea8:	08002a74 	.word	0x08002a74
 8001eac:	08002a9c 	.word	0x08002a9c

08001eb0 <USART2_IRQHandler>:

	}
}

void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0


	usart_interrupt_handling(&usart_2_handle);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USART2_IRQHandler+0x10>)
 8001eb6:	f7ff fd25 	bl	8001904 <usart_interrupt_handling>
	{
		USART2->SR &= ~(1 << 5);
		Usart_Write(string_to_send);
	}
	*/
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000118 	.word	0x20000118

08001ec4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	{
		Flag_RepeatedStart = 1;
		Send_Repeated_Start();
	}
	*/
	if ((I2C2->SR1 & 0x40) == 0x40)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d135      	bne.n	8001f42 <I2C2_EV_IRQHandler+0x7e>
	{
		Count_Bytes_Read++;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <I2C2_EV_IRQHandler+0x8c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <I2C2_EV_IRQHandler+0x8c>)
 8001ee0:	701a      	strb	r2, [r3, #0]
		if (Count_Bytes_Read == 1)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <I2C2_EV_IRQHandler+0x8c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d118      	bne.n	8001f1c <I2C2_EV_IRQHandler+0x58>
		{
			Accel_x = (I2C2->DR);
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <I2C2_EV_IRQHandler+0x90>)
 8001ef2:	801a      	strh	r2, [r3, #0]
			Accel_x = Accel_x << 8;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <I2C2_EV_IRQHandler+0x90>)
 8001ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <I2C2_EV_IRQHandler+0x90>)
 8001f00:	801a      	strh	r2, [r3, #0]
			I2C2->CR1 &= ~(1 << 10);
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f0c:	6013      	str	r3, [r2, #0]
			I2C2->CR1 |= (1 << 9);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f18:	6013      	str	r3, [r2, #0]
			//sprintf((char*)string_to_send,"%d \r\n",Accel_x);
			//Usart_Write(string_to_send);
		}
	}

}
 8001f1a:	e012      	b.n	8001f42 <I2C2_EV_IRQHandler+0x7e>
		else if (Count_Bytes_Read == 2)
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <I2C2_EV_IRQHandler+0x8c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d10e      	bne.n	8001f42 <I2C2_EV_IRQHandler+0x7e>
			Accel_x |= I2C2->DR;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <I2C2_EV_IRQHandler+0x88>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <I2C2_EV_IRQHandler+0x90>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <I2C2_EV_IRQHandler+0x90>)
 8001f3a:	801a      	strh	r2, [r3, #0]
			Count_Bytes_Read = 0;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <I2C2_EV_IRQHandler+0x8c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	20000146 	.word	0x20000146
 8001f54:	20000144 	.word	0x20000144

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f000 f846 	bl	8002018 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20005000 	.word	0x20005000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000290 	.word	0x20000290
 8001fc0:	200002a8 	.word	0x200002a8

08001fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopForever+0xe>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopForever+0x16>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ff2:	f000 f817 	bl	8002024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff6:	f7ff fe23 	bl	8001c40 <main>

08001ffa <LoopForever>:

LoopForever:
    b LoopForever
 8001ffa:	e7fe      	b.n	8001ffa <LoopForever>
  ldr   r0, =_estack
 8001ffc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002008:	08002b00 	.word	0x08002b00
  ldr r2, =_sbss
 800200c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002010:	200002a4 	.word	0x200002a4

08002014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC1_2_IRQHandler>
	...

08002018 <__errno>:
 8002018:	4b01      	ldr	r3, [pc, #4]	; (8002020 <__errno+0x8>)
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000094 	.word	0x20000094

08002024 <__libc_init_array>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	2600      	movs	r6, #0
 8002028:	4d0c      	ldr	r5, [pc, #48]	; (800205c <__libc_init_array+0x38>)
 800202a:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <__libc_init_array+0x3c>)
 800202c:	1b64      	subs	r4, r4, r5
 800202e:	10a4      	asrs	r4, r4, #2
 8002030:	42a6      	cmp	r6, r4
 8002032:	d109      	bne.n	8002048 <__libc_init_array+0x24>
 8002034:	f000 fc94 	bl	8002960 <_init>
 8002038:	2600      	movs	r6, #0
 800203a:	4d0a      	ldr	r5, [pc, #40]	; (8002064 <__libc_init_array+0x40>)
 800203c:	4c0a      	ldr	r4, [pc, #40]	; (8002068 <__libc_init_array+0x44>)
 800203e:	1b64      	subs	r4, r4, r5
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	42a6      	cmp	r6, r4
 8002044:	d105      	bne.n	8002052 <__libc_init_array+0x2e>
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	f855 3b04 	ldr.w	r3, [r5], #4
 800204c:	4798      	blx	r3
 800204e:	3601      	adds	r6, #1
 8002050:	e7ee      	b.n	8002030 <__libc_init_array+0xc>
 8002052:	f855 3b04 	ldr.w	r3, [r5], #4
 8002056:	4798      	blx	r3
 8002058:	3601      	adds	r6, #1
 800205a:	e7f2      	b.n	8002042 <__libc_init_array+0x1e>
 800205c:	08002af8 	.word	0x08002af8
 8002060:	08002af8 	.word	0x08002af8
 8002064:	08002af8 	.word	0x08002af8
 8002068:	08002afc 	.word	0x08002afc

0800206c <siprintf>:
 800206c:	b40e      	push	{r1, r2, r3}
 800206e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002072:	b500      	push	{lr}
 8002074:	b09c      	sub	sp, #112	; 0x70
 8002076:	ab1d      	add	r3, sp, #116	; 0x74
 8002078:	9002      	str	r0, [sp, #8]
 800207a:	9006      	str	r0, [sp, #24]
 800207c:	9107      	str	r1, [sp, #28]
 800207e:	9104      	str	r1, [sp, #16]
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <siprintf+0x38>)
 8002082:	4909      	ldr	r1, [pc, #36]	; (80020a8 <siprintf+0x3c>)
 8002084:	f853 2b04 	ldr.w	r2, [r3], #4
 8002088:	9105      	str	r1, [sp, #20]
 800208a:	6800      	ldr	r0, [r0, #0]
 800208c:	a902      	add	r1, sp, #8
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f000 f868 	bl	8002164 <_svfiprintf_r>
 8002094:	2200      	movs	r2, #0
 8002096:	9b02      	ldr	r3, [sp, #8]
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	b01c      	add	sp, #112	; 0x70
 800209c:	f85d eb04 	ldr.w	lr, [sp], #4
 80020a0:	b003      	add	sp, #12
 80020a2:	4770      	bx	lr
 80020a4:	20000094 	.word	0x20000094
 80020a8:	ffff0208 	.word	0xffff0208

080020ac <__ssputs_r>:
 80020ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b0:	688e      	ldr	r6, [r1, #8]
 80020b2:	4682      	mov	sl, r0
 80020b4:	429e      	cmp	r6, r3
 80020b6:	460c      	mov	r4, r1
 80020b8:	4690      	mov	r8, r2
 80020ba:	461f      	mov	r7, r3
 80020bc:	d838      	bhi.n	8002130 <__ssputs_r+0x84>
 80020be:	898a      	ldrh	r2, [r1, #12]
 80020c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020c4:	d032      	beq.n	800212c <__ssputs_r+0x80>
 80020c6:	6825      	ldr	r5, [r4, #0]
 80020c8:	6909      	ldr	r1, [r1, #16]
 80020ca:	3301      	adds	r3, #1
 80020cc:	eba5 0901 	sub.w	r9, r5, r1
 80020d0:	6965      	ldr	r5, [r4, #20]
 80020d2:	444b      	add	r3, r9
 80020d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020dc:	106d      	asrs	r5, r5, #1
 80020de:	429d      	cmp	r5, r3
 80020e0:	bf38      	it	cc
 80020e2:	461d      	movcc	r5, r3
 80020e4:	0553      	lsls	r3, r2, #21
 80020e6:	d531      	bpl.n	800214c <__ssputs_r+0xa0>
 80020e8:	4629      	mov	r1, r5
 80020ea:	f000 fb6f 	bl	80027cc <_malloc_r>
 80020ee:	4606      	mov	r6, r0
 80020f0:	b950      	cbnz	r0, 8002108 <__ssputs_r+0x5c>
 80020f2:	230c      	movs	r3, #12
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f8ca 3000 	str.w	r3, [sl]
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002102:	81a3      	strh	r3, [r4, #12]
 8002104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002108:	464a      	mov	r2, r9
 800210a:	6921      	ldr	r1, [r4, #16]
 800210c:	f000 face 	bl	80026ac <memcpy>
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211a:	81a3      	strh	r3, [r4, #12]
 800211c:	6126      	str	r6, [r4, #16]
 800211e:	444e      	add	r6, r9
 8002120:	6026      	str	r6, [r4, #0]
 8002122:	463e      	mov	r6, r7
 8002124:	6165      	str	r5, [r4, #20]
 8002126:	eba5 0509 	sub.w	r5, r5, r9
 800212a:	60a5      	str	r5, [r4, #8]
 800212c:	42be      	cmp	r6, r7
 800212e:	d900      	bls.n	8002132 <__ssputs_r+0x86>
 8002130:	463e      	mov	r6, r7
 8002132:	4632      	mov	r2, r6
 8002134:	4641      	mov	r1, r8
 8002136:	6820      	ldr	r0, [r4, #0]
 8002138:	f000 fac6 	bl	80026c8 <memmove>
 800213c:	68a3      	ldr	r3, [r4, #8]
 800213e:	2000      	movs	r0, #0
 8002140:	1b9b      	subs	r3, r3, r6
 8002142:	60a3      	str	r3, [r4, #8]
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	4433      	add	r3, r6
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	e7db      	b.n	8002104 <__ssputs_r+0x58>
 800214c:	462a      	mov	r2, r5
 800214e:	f000 fbb1 	bl	80028b4 <_realloc_r>
 8002152:	4606      	mov	r6, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	d1e1      	bne.n	800211c <__ssputs_r+0x70>
 8002158:	4650      	mov	r0, sl
 800215a:	6921      	ldr	r1, [r4, #16]
 800215c:	f000 face 	bl	80026fc <_free_r>
 8002160:	e7c7      	b.n	80020f2 <__ssputs_r+0x46>
	...

08002164 <_svfiprintf_r>:
 8002164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002168:	4698      	mov	r8, r3
 800216a:	898b      	ldrh	r3, [r1, #12]
 800216c:	4607      	mov	r7, r0
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	460d      	mov	r5, r1
 8002172:	4614      	mov	r4, r2
 8002174:	b09d      	sub	sp, #116	; 0x74
 8002176:	d50e      	bpl.n	8002196 <_svfiprintf_r+0x32>
 8002178:	690b      	ldr	r3, [r1, #16]
 800217a:	b963      	cbnz	r3, 8002196 <_svfiprintf_r+0x32>
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	f000 fb25 	bl	80027cc <_malloc_r>
 8002182:	6028      	str	r0, [r5, #0]
 8002184:	6128      	str	r0, [r5, #16]
 8002186:	b920      	cbnz	r0, 8002192 <_svfiprintf_r+0x2e>
 8002188:	230c      	movs	r3, #12
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	e0d1      	b.n	8002336 <_svfiprintf_r+0x1d2>
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	616b      	str	r3, [r5, #20]
 8002196:	2300      	movs	r3, #0
 8002198:	9309      	str	r3, [sp, #36]	; 0x24
 800219a:	2320      	movs	r3, #32
 800219c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021a0:	2330      	movs	r3, #48	; 0x30
 80021a2:	f04f 0901 	mov.w	r9, #1
 80021a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80021aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002350 <_svfiprintf_r+0x1ec>
 80021ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b2:	4623      	mov	r3, r4
 80021b4:	469a      	mov	sl, r3
 80021b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ba:	b10a      	cbz	r2, 80021c0 <_svfiprintf_r+0x5c>
 80021bc:	2a25      	cmp	r2, #37	; 0x25
 80021be:	d1f9      	bne.n	80021b4 <_svfiprintf_r+0x50>
 80021c0:	ebba 0b04 	subs.w	fp, sl, r4
 80021c4:	d00b      	beq.n	80021de <_svfiprintf_r+0x7a>
 80021c6:	465b      	mov	r3, fp
 80021c8:	4622      	mov	r2, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	4638      	mov	r0, r7
 80021ce:	f7ff ff6d 	bl	80020ac <__ssputs_r>
 80021d2:	3001      	adds	r0, #1
 80021d4:	f000 80aa 	beq.w	800232c <_svfiprintf_r+0x1c8>
 80021d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021da:	445a      	add	r2, fp
 80021dc:	9209      	str	r2, [sp, #36]	; 0x24
 80021de:	f89a 3000 	ldrb.w	r3, [sl]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a2 	beq.w	800232c <_svfiprintf_r+0x1c8>
 80021e8:	2300      	movs	r3, #0
 80021ea:	f04f 32ff 	mov.w	r2, #4294967295
 80021ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021f2:	f10a 0a01 	add.w	sl, sl, #1
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	9307      	str	r3, [sp, #28]
 80021fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002200:	4654      	mov	r4, sl
 8002202:	2205      	movs	r2, #5
 8002204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002208:	4851      	ldr	r0, [pc, #324]	; (8002350 <_svfiprintf_r+0x1ec>)
 800220a:	f000 fa41 	bl	8002690 <memchr>
 800220e:	9a04      	ldr	r2, [sp, #16]
 8002210:	b9d8      	cbnz	r0, 800224a <_svfiprintf_r+0xe6>
 8002212:	06d0      	lsls	r0, r2, #27
 8002214:	bf44      	itt	mi
 8002216:	2320      	movmi	r3, #32
 8002218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800221c:	0711      	lsls	r1, r2, #28
 800221e:	bf44      	itt	mi
 8002220:	232b      	movmi	r3, #43	; 0x2b
 8002222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002226:	f89a 3000 	ldrb.w	r3, [sl]
 800222a:	2b2a      	cmp	r3, #42	; 0x2a
 800222c:	d015      	beq.n	800225a <_svfiprintf_r+0xf6>
 800222e:	4654      	mov	r4, sl
 8002230:	2000      	movs	r0, #0
 8002232:	f04f 0c0a 	mov.w	ip, #10
 8002236:	9a07      	ldr	r2, [sp, #28]
 8002238:	4621      	mov	r1, r4
 800223a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800223e:	3b30      	subs	r3, #48	; 0x30
 8002240:	2b09      	cmp	r3, #9
 8002242:	d94e      	bls.n	80022e2 <_svfiprintf_r+0x17e>
 8002244:	b1b0      	cbz	r0, 8002274 <_svfiprintf_r+0x110>
 8002246:	9207      	str	r2, [sp, #28]
 8002248:	e014      	b.n	8002274 <_svfiprintf_r+0x110>
 800224a:	eba0 0308 	sub.w	r3, r0, r8
 800224e:	fa09 f303 	lsl.w	r3, r9, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	46a2      	mov	sl, r4
 8002256:	9304      	str	r3, [sp, #16]
 8002258:	e7d2      	b.n	8002200 <_svfiprintf_r+0x9c>
 800225a:	9b03      	ldr	r3, [sp, #12]
 800225c:	1d19      	adds	r1, r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	9103      	str	r1, [sp, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	bfbb      	ittet	lt
 8002266:	425b      	neglt	r3, r3
 8002268:	f042 0202 	orrlt.w	r2, r2, #2
 800226c:	9307      	strge	r3, [sp, #28]
 800226e:	9307      	strlt	r3, [sp, #28]
 8002270:	bfb8      	it	lt
 8002272:	9204      	strlt	r2, [sp, #16]
 8002274:	7823      	ldrb	r3, [r4, #0]
 8002276:	2b2e      	cmp	r3, #46	; 0x2e
 8002278:	d10c      	bne.n	8002294 <_svfiprintf_r+0x130>
 800227a:	7863      	ldrb	r3, [r4, #1]
 800227c:	2b2a      	cmp	r3, #42	; 0x2a
 800227e:	d135      	bne.n	80022ec <_svfiprintf_r+0x188>
 8002280:	9b03      	ldr	r3, [sp, #12]
 8002282:	3402      	adds	r4, #2
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	9203      	str	r2, [sp, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	bfb8      	it	lt
 800228e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002292:	9305      	str	r3, [sp, #20]
 8002294:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002354 <_svfiprintf_r+0x1f0>
 8002298:	2203      	movs	r2, #3
 800229a:	4650      	mov	r0, sl
 800229c:	7821      	ldrb	r1, [r4, #0]
 800229e:	f000 f9f7 	bl	8002690 <memchr>
 80022a2:	b140      	cbz	r0, 80022b6 <_svfiprintf_r+0x152>
 80022a4:	2340      	movs	r3, #64	; 0x40
 80022a6:	eba0 000a 	sub.w	r0, r0, sl
 80022aa:	fa03 f000 	lsl.w	r0, r3, r0
 80022ae:	9b04      	ldr	r3, [sp, #16]
 80022b0:	3401      	adds	r4, #1
 80022b2:	4303      	orrs	r3, r0
 80022b4:	9304      	str	r3, [sp, #16]
 80022b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022ba:	2206      	movs	r2, #6
 80022bc:	4826      	ldr	r0, [pc, #152]	; (8002358 <_svfiprintf_r+0x1f4>)
 80022be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022c2:	f000 f9e5 	bl	8002690 <memchr>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d038      	beq.n	800233c <_svfiprintf_r+0x1d8>
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <_svfiprintf_r+0x1f8>)
 80022cc:	bb1b      	cbnz	r3, 8002316 <_svfiprintf_r+0x1b2>
 80022ce:	9b03      	ldr	r3, [sp, #12]
 80022d0:	3307      	adds	r3, #7
 80022d2:	f023 0307 	bic.w	r3, r3, #7
 80022d6:	3308      	adds	r3, #8
 80022d8:	9303      	str	r3, [sp, #12]
 80022da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022dc:	4433      	add	r3, r6
 80022de:	9309      	str	r3, [sp, #36]	; 0x24
 80022e0:	e767      	b.n	80021b2 <_svfiprintf_r+0x4e>
 80022e2:	460c      	mov	r4, r1
 80022e4:	2001      	movs	r0, #1
 80022e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80022ea:	e7a5      	b.n	8002238 <_svfiprintf_r+0xd4>
 80022ec:	2300      	movs	r3, #0
 80022ee:	f04f 0c0a 	mov.w	ip, #10
 80022f2:	4619      	mov	r1, r3
 80022f4:	3401      	adds	r4, #1
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	4620      	mov	r0, r4
 80022fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022fe:	3a30      	subs	r2, #48	; 0x30
 8002300:	2a09      	cmp	r2, #9
 8002302:	d903      	bls.n	800230c <_svfiprintf_r+0x1a8>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0c5      	beq.n	8002294 <_svfiprintf_r+0x130>
 8002308:	9105      	str	r1, [sp, #20]
 800230a:	e7c3      	b.n	8002294 <_svfiprintf_r+0x130>
 800230c:	4604      	mov	r4, r0
 800230e:	2301      	movs	r3, #1
 8002310:	fb0c 2101 	mla	r1, ip, r1, r2
 8002314:	e7f0      	b.n	80022f8 <_svfiprintf_r+0x194>
 8002316:	ab03      	add	r3, sp, #12
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	462a      	mov	r2, r5
 800231c:	4638      	mov	r0, r7
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_svfiprintf_r+0x1fc>)
 8002320:	a904      	add	r1, sp, #16
 8002322:	f3af 8000 	nop.w
 8002326:	1c42      	adds	r2, r0, #1
 8002328:	4606      	mov	r6, r0
 800232a:	d1d6      	bne.n	80022da <_svfiprintf_r+0x176>
 800232c:	89ab      	ldrh	r3, [r5, #12]
 800232e:	065b      	lsls	r3, r3, #25
 8002330:	f53f af2c 	bmi.w	800218c <_svfiprintf_r+0x28>
 8002334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002336:	b01d      	add	sp, #116	; 0x74
 8002338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233c:	ab03      	add	r3, sp, #12
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	462a      	mov	r2, r5
 8002342:	4638      	mov	r0, r7
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <_svfiprintf_r+0x1fc>)
 8002346:	a904      	add	r1, sp, #16
 8002348:	f000 f87c 	bl	8002444 <_printf_i>
 800234c:	e7eb      	b.n	8002326 <_svfiprintf_r+0x1c2>
 800234e:	bf00      	nop
 8002350:	08002ac4 	.word	0x08002ac4
 8002354:	08002aca 	.word	0x08002aca
 8002358:	08002ace 	.word	0x08002ace
 800235c:	00000000 	.word	0x00000000
 8002360:	080020ad 	.word	0x080020ad

08002364 <_printf_common>:
 8002364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002368:	4616      	mov	r6, r2
 800236a:	4699      	mov	r9, r3
 800236c:	688a      	ldr	r2, [r1, #8]
 800236e:	690b      	ldr	r3, [r1, #16]
 8002370:	4607      	mov	r7, r0
 8002372:	4293      	cmp	r3, r2
 8002374:	bfb8      	it	lt
 8002376:	4613      	movlt	r3, r2
 8002378:	6033      	str	r3, [r6, #0]
 800237a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800237e:	460c      	mov	r4, r1
 8002380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002384:	b10a      	cbz	r2, 800238a <_printf_common+0x26>
 8002386:	3301      	adds	r3, #1
 8002388:	6033      	str	r3, [r6, #0]
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	0699      	lsls	r1, r3, #26
 800238e:	bf42      	ittt	mi
 8002390:	6833      	ldrmi	r3, [r6, #0]
 8002392:	3302      	addmi	r3, #2
 8002394:	6033      	strmi	r3, [r6, #0]
 8002396:	6825      	ldr	r5, [r4, #0]
 8002398:	f015 0506 	ands.w	r5, r5, #6
 800239c:	d106      	bne.n	80023ac <_printf_common+0x48>
 800239e:	f104 0a19 	add.w	sl, r4, #25
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	6832      	ldr	r2, [r6, #0]
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	42ab      	cmp	r3, r5
 80023aa:	dc28      	bgt.n	80023fe <_printf_common+0x9a>
 80023ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023b0:	1e13      	subs	r3, r2, #0
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	bf18      	it	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	0692      	lsls	r2, r2, #26
 80023ba:	d42d      	bmi.n	8002418 <_printf_common+0xb4>
 80023bc:	4649      	mov	r1, r9
 80023be:	4638      	mov	r0, r7
 80023c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023c4:	47c0      	blx	r8
 80023c6:	3001      	adds	r0, #1
 80023c8:	d020      	beq.n	800240c <_printf_common+0xa8>
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	68e5      	ldr	r5, [r4, #12]
 80023ce:	f003 0306 	and.w	r3, r3, #6
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf18      	it	ne
 80023d6:	2500      	movne	r5, #0
 80023d8:	6832      	ldr	r2, [r6, #0]
 80023da:	f04f 0600 	mov.w	r6, #0
 80023de:	68a3      	ldr	r3, [r4, #8]
 80023e0:	bf08      	it	eq
 80023e2:	1aad      	subeq	r5, r5, r2
 80023e4:	6922      	ldr	r2, [r4, #16]
 80023e6:	bf08      	it	eq
 80023e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bfc4      	itt	gt
 80023f0:	1a9b      	subgt	r3, r3, r2
 80023f2:	18ed      	addgt	r5, r5, r3
 80023f4:	341a      	adds	r4, #26
 80023f6:	42b5      	cmp	r5, r6
 80023f8:	d11a      	bne.n	8002430 <_printf_common+0xcc>
 80023fa:	2000      	movs	r0, #0
 80023fc:	e008      	b.n	8002410 <_printf_common+0xac>
 80023fe:	2301      	movs	r3, #1
 8002400:	4652      	mov	r2, sl
 8002402:	4649      	mov	r1, r9
 8002404:	4638      	mov	r0, r7
 8002406:	47c0      	blx	r8
 8002408:	3001      	adds	r0, #1
 800240a:	d103      	bne.n	8002414 <_printf_common+0xb0>
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002414:	3501      	adds	r5, #1
 8002416:	e7c4      	b.n	80023a2 <_printf_common+0x3e>
 8002418:	2030      	movs	r0, #48	; 0x30
 800241a:	18e1      	adds	r1, r4, r3
 800241c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002426:	4422      	add	r2, r4
 8002428:	3302      	adds	r3, #2
 800242a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800242e:	e7c5      	b.n	80023bc <_printf_common+0x58>
 8002430:	2301      	movs	r3, #1
 8002432:	4622      	mov	r2, r4
 8002434:	4649      	mov	r1, r9
 8002436:	4638      	mov	r0, r7
 8002438:	47c0      	blx	r8
 800243a:	3001      	adds	r0, #1
 800243c:	d0e6      	beq.n	800240c <_printf_common+0xa8>
 800243e:	3601      	adds	r6, #1
 8002440:	e7d9      	b.n	80023f6 <_printf_common+0x92>
	...

08002444 <_printf_i>:
 8002444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002448:	7e0f      	ldrb	r7, [r1, #24]
 800244a:	4691      	mov	r9, r2
 800244c:	2f78      	cmp	r7, #120	; 0x78
 800244e:	4680      	mov	r8, r0
 8002450:	460c      	mov	r4, r1
 8002452:	469a      	mov	sl, r3
 8002454:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800245a:	d807      	bhi.n	800246c <_printf_i+0x28>
 800245c:	2f62      	cmp	r7, #98	; 0x62
 800245e:	d80a      	bhi.n	8002476 <_printf_i+0x32>
 8002460:	2f00      	cmp	r7, #0
 8002462:	f000 80d9 	beq.w	8002618 <_printf_i+0x1d4>
 8002466:	2f58      	cmp	r7, #88	; 0x58
 8002468:	f000 80a4 	beq.w	80025b4 <_printf_i+0x170>
 800246c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002474:	e03a      	b.n	80024ec <_printf_i+0xa8>
 8002476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800247a:	2b15      	cmp	r3, #21
 800247c:	d8f6      	bhi.n	800246c <_printf_i+0x28>
 800247e:	a101      	add	r1, pc, #4	; (adr r1, 8002484 <_printf_i+0x40>)
 8002480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002484:	080024dd 	.word	0x080024dd
 8002488:	080024f1 	.word	0x080024f1
 800248c:	0800246d 	.word	0x0800246d
 8002490:	0800246d 	.word	0x0800246d
 8002494:	0800246d 	.word	0x0800246d
 8002498:	0800246d 	.word	0x0800246d
 800249c:	080024f1 	.word	0x080024f1
 80024a0:	0800246d 	.word	0x0800246d
 80024a4:	0800246d 	.word	0x0800246d
 80024a8:	0800246d 	.word	0x0800246d
 80024ac:	0800246d 	.word	0x0800246d
 80024b0:	080025ff 	.word	0x080025ff
 80024b4:	08002521 	.word	0x08002521
 80024b8:	080025e1 	.word	0x080025e1
 80024bc:	0800246d 	.word	0x0800246d
 80024c0:	0800246d 	.word	0x0800246d
 80024c4:	08002621 	.word	0x08002621
 80024c8:	0800246d 	.word	0x0800246d
 80024cc:	08002521 	.word	0x08002521
 80024d0:	0800246d 	.word	0x0800246d
 80024d4:	0800246d 	.word	0x0800246d
 80024d8:	080025e9 	.word	0x080025e9
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	602a      	str	r2, [r5, #0]
 80024e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0a4      	b.n	800263a <_printf_i+0x1f6>
 80024f0:	6820      	ldr	r0, [r4, #0]
 80024f2:	6829      	ldr	r1, [r5, #0]
 80024f4:	0606      	lsls	r6, r0, #24
 80024f6:	f101 0304 	add.w	r3, r1, #4
 80024fa:	d50a      	bpl.n	8002512 <_printf_i+0xce>
 80024fc:	680e      	ldr	r6, [r1, #0]
 80024fe:	602b      	str	r3, [r5, #0]
 8002500:	2e00      	cmp	r6, #0
 8002502:	da03      	bge.n	800250c <_printf_i+0xc8>
 8002504:	232d      	movs	r3, #45	; 0x2d
 8002506:	4276      	negs	r6, r6
 8002508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800250c:	230a      	movs	r3, #10
 800250e:	485e      	ldr	r0, [pc, #376]	; (8002688 <_printf_i+0x244>)
 8002510:	e019      	b.n	8002546 <_printf_i+0x102>
 8002512:	680e      	ldr	r6, [r1, #0]
 8002514:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	bf18      	it	ne
 800251c:	b236      	sxthne	r6, r6
 800251e:	e7ef      	b.n	8002500 <_printf_i+0xbc>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	1d19      	adds	r1, r3, #4
 8002526:	6029      	str	r1, [r5, #0]
 8002528:	0601      	lsls	r1, r0, #24
 800252a:	d501      	bpl.n	8002530 <_printf_i+0xec>
 800252c:	681e      	ldr	r6, [r3, #0]
 800252e:	e002      	b.n	8002536 <_printf_i+0xf2>
 8002530:	0646      	lsls	r6, r0, #25
 8002532:	d5fb      	bpl.n	800252c <_printf_i+0xe8>
 8002534:	881e      	ldrh	r6, [r3, #0]
 8002536:	2f6f      	cmp	r7, #111	; 0x6f
 8002538:	bf0c      	ite	eq
 800253a:	2308      	moveq	r3, #8
 800253c:	230a      	movne	r3, #10
 800253e:	4852      	ldr	r0, [pc, #328]	; (8002688 <_printf_i+0x244>)
 8002540:	2100      	movs	r1, #0
 8002542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002546:	6865      	ldr	r5, [r4, #4]
 8002548:	2d00      	cmp	r5, #0
 800254a:	bfa8      	it	ge
 800254c:	6821      	ldrge	r1, [r4, #0]
 800254e:	60a5      	str	r5, [r4, #8]
 8002550:	bfa4      	itt	ge
 8002552:	f021 0104 	bicge.w	r1, r1, #4
 8002556:	6021      	strge	r1, [r4, #0]
 8002558:	b90e      	cbnz	r6, 800255e <_printf_i+0x11a>
 800255a:	2d00      	cmp	r5, #0
 800255c:	d04d      	beq.n	80025fa <_printf_i+0x1b6>
 800255e:	4615      	mov	r5, r2
 8002560:	fbb6 f1f3 	udiv	r1, r6, r3
 8002564:	fb03 6711 	mls	r7, r3, r1, r6
 8002568:	5dc7      	ldrb	r7, [r0, r7]
 800256a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800256e:	4637      	mov	r7, r6
 8002570:	42bb      	cmp	r3, r7
 8002572:	460e      	mov	r6, r1
 8002574:	d9f4      	bls.n	8002560 <_printf_i+0x11c>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d10b      	bne.n	8002592 <_printf_i+0x14e>
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	07de      	lsls	r6, r3, #31
 800257e:	d508      	bpl.n	8002592 <_printf_i+0x14e>
 8002580:	6923      	ldr	r3, [r4, #16]
 8002582:	6861      	ldr	r1, [r4, #4]
 8002584:	4299      	cmp	r1, r3
 8002586:	bfde      	ittt	le
 8002588:	2330      	movle	r3, #48	; 0x30
 800258a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800258e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002592:	1b52      	subs	r2, r2, r5
 8002594:	6122      	str	r2, [r4, #16]
 8002596:	464b      	mov	r3, r9
 8002598:	4621      	mov	r1, r4
 800259a:	4640      	mov	r0, r8
 800259c:	f8cd a000 	str.w	sl, [sp]
 80025a0:	aa03      	add	r2, sp, #12
 80025a2:	f7ff fedf 	bl	8002364 <_printf_common>
 80025a6:	3001      	adds	r0, #1
 80025a8:	d14c      	bne.n	8002644 <_printf_i+0x200>
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295
 80025ae:	b004      	add	sp, #16
 80025b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b4:	4834      	ldr	r0, [pc, #208]	; (8002688 <_printf_i+0x244>)
 80025b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025ba:	6829      	ldr	r1, [r5, #0]
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f851 6b04 	ldr.w	r6, [r1], #4
 80025c2:	6029      	str	r1, [r5, #0]
 80025c4:	061d      	lsls	r5, r3, #24
 80025c6:	d514      	bpl.n	80025f2 <_printf_i+0x1ae>
 80025c8:	07df      	lsls	r7, r3, #31
 80025ca:	bf44      	itt	mi
 80025cc:	f043 0320 	orrmi.w	r3, r3, #32
 80025d0:	6023      	strmi	r3, [r4, #0]
 80025d2:	b91e      	cbnz	r6, 80025dc <_printf_i+0x198>
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	f023 0320 	bic.w	r3, r3, #32
 80025da:	6023      	str	r3, [r4, #0]
 80025dc:	2310      	movs	r3, #16
 80025de:	e7af      	b.n	8002540 <_printf_i+0xfc>
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f043 0320 	orr.w	r3, r3, #32
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	2378      	movs	r3, #120	; 0x78
 80025ea:	4828      	ldr	r0, [pc, #160]	; (800268c <_printf_i+0x248>)
 80025ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025f0:	e7e3      	b.n	80025ba <_printf_i+0x176>
 80025f2:	0659      	lsls	r1, r3, #25
 80025f4:	bf48      	it	mi
 80025f6:	b2b6      	uxthmi	r6, r6
 80025f8:	e7e6      	b.n	80025c8 <_printf_i+0x184>
 80025fa:	4615      	mov	r5, r2
 80025fc:	e7bb      	b.n	8002576 <_printf_i+0x132>
 80025fe:	682b      	ldr	r3, [r5, #0]
 8002600:	6826      	ldr	r6, [r4, #0]
 8002602:	1d18      	adds	r0, r3, #4
 8002604:	6961      	ldr	r1, [r4, #20]
 8002606:	6028      	str	r0, [r5, #0]
 8002608:	0635      	lsls	r5, r6, #24
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	d501      	bpl.n	8002612 <_printf_i+0x1ce>
 800260e:	6019      	str	r1, [r3, #0]
 8002610:	e002      	b.n	8002618 <_printf_i+0x1d4>
 8002612:	0670      	lsls	r0, r6, #25
 8002614:	d5fb      	bpl.n	800260e <_printf_i+0x1ca>
 8002616:	8019      	strh	r1, [r3, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	4615      	mov	r5, r2
 800261c:	6123      	str	r3, [r4, #16]
 800261e:	e7ba      	b.n	8002596 <_printf_i+0x152>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	1d1a      	adds	r2, r3, #4
 8002626:	602a      	str	r2, [r5, #0]
 8002628:	681d      	ldr	r5, [r3, #0]
 800262a:	6862      	ldr	r2, [r4, #4]
 800262c:	4628      	mov	r0, r5
 800262e:	f000 f82f 	bl	8002690 <memchr>
 8002632:	b108      	cbz	r0, 8002638 <_printf_i+0x1f4>
 8002634:	1b40      	subs	r0, r0, r5
 8002636:	6060      	str	r0, [r4, #4]
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	6123      	str	r3, [r4, #16]
 800263c:	2300      	movs	r3, #0
 800263e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002642:	e7a8      	b.n	8002596 <_printf_i+0x152>
 8002644:	462a      	mov	r2, r5
 8002646:	4649      	mov	r1, r9
 8002648:	4640      	mov	r0, r8
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	47d0      	blx	sl
 800264e:	3001      	adds	r0, #1
 8002650:	d0ab      	beq.n	80025aa <_printf_i+0x166>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	079b      	lsls	r3, r3, #30
 8002656:	d413      	bmi.n	8002680 <_printf_i+0x23c>
 8002658:	68e0      	ldr	r0, [r4, #12]
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	4298      	cmp	r0, r3
 800265e:	bfb8      	it	lt
 8002660:	4618      	movlt	r0, r3
 8002662:	e7a4      	b.n	80025ae <_printf_i+0x16a>
 8002664:	2301      	movs	r3, #1
 8002666:	4632      	mov	r2, r6
 8002668:	4649      	mov	r1, r9
 800266a:	4640      	mov	r0, r8
 800266c:	47d0      	blx	sl
 800266e:	3001      	adds	r0, #1
 8002670:	d09b      	beq.n	80025aa <_printf_i+0x166>
 8002672:	3501      	adds	r5, #1
 8002674:	68e3      	ldr	r3, [r4, #12]
 8002676:	9903      	ldr	r1, [sp, #12]
 8002678:	1a5b      	subs	r3, r3, r1
 800267a:	42ab      	cmp	r3, r5
 800267c:	dcf2      	bgt.n	8002664 <_printf_i+0x220>
 800267e:	e7eb      	b.n	8002658 <_printf_i+0x214>
 8002680:	2500      	movs	r5, #0
 8002682:	f104 0619 	add.w	r6, r4, #25
 8002686:	e7f5      	b.n	8002674 <_printf_i+0x230>
 8002688:	08002ad5 	.word	0x08002ad5
 800268c:	08002ae6 	.word	0x08002ae6

08002690 <memchr>:
 8002690:	4603      	mov	r3, r0
 8002692:	b510      	push	{r4, lr}
 8002694:	b2c9      	uxtb	r1, r1
 8002696:	4402      	add	r2, r0
 8002698:	4293      	cmp	r3, r2
 800269a:	4618      	mov	r0, r3
 800269c:	d101      	bne.n	80026a2 <memchr+0x12>
 800269e:	2000      	movs	r0, #0
 80026a0:	e003      	b.n	80026aa <memchr+0x1a>
 80026a2:	7804      	ldrb	r4, [r0, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	428c      	cmp	r4, r1
 80026a8:	d1f6      	bne.n	8002698 <memchr+0x8>
 80026aa:	bd10      	pop	{r4, pc}

080026ac <memcpy>:
 80026ac:	440a      	add	r2, r1
 80026ae:	4291      	cmp	r1, r2
 80026b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80026b4:	d100      	bne.n	80026b8 <memcpy+0xc>
 80026b6:	4770      	bx	lr
 80026b8:	b510      	push	{r4, lr}
 80026ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026be:	4291      	cmp	r1, r2
 80026c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c4:	d1f9      	bne.n	80026ba <memcpy+0xe>
 80026c6:	bd10      	pop	{r4, pc}

080026c8 <memmove>:
 80026c8:	4288      	cmp	r0, r1
 80026ca:	b510      	push	{r4, lr}
 80026cc:	eb01 0402 	add.w	r4, r1, r2
 80026d0:	d902      	bls.n	80026d8 <memmove+0x10>
 80026d2:	4284      	cmp	r4, r0
 80026d4:	4623      	mov	r3, r4
 80026d6:	d807      	bhi.n	80026e8 <memmove+0x20>
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	42a1      	cmp	r1, r4
 80026dc:	d008      	beq.n	80026f0 <memmove+0x28>
 80026de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026e6:	e7f8      	b.n	80026da <memmove+0x12>
 80026e8:	4601      	mov	r1, r0
 80026ea:	4402      	add	r2, r0
 80026ec:	428a      	cmp	r2, r1
 80026ee:	d100      	bne.n	80026f2 <memmove+0x2a>
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026fa:	e7f7      	b.n	80026ec <memmove+0x24>

080026fc <_free_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4605      	mov	r5, r0
 8002700:	2900      	cmp	r1, #0
 8002702:	d040      	beq.n	8002786 <_free_r+0x8a>
 8002704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002708:	1f0c      	subs	r4, r1, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	18e4      	addlt	r4, r4, r3
 8002710:	f000 f910 	bl	8002934 <__malloc_lock>
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <_free_r+0x8c>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	b933      	cbnz	r3, 8002728 <_free_r+0x2c>
 800271a:	6063      	str	r3, [r4, #4]
 800271c:	6014      	str	r4, [r2, #0]
 800271e:	4628      	mov	r0, r5
 8002720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002724:	f000 b90c 	b.w	8002940 <__malloc_unlock>
 8002728:	42a3      	cmp	r3, r4
 800272a:	d908      	bls.n	800273e <_free_r+0x42>
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	1821      	adds	r1, r4, r0
 8002730:	428b      	cmp	r3, r1
 8002732:	bf01      	itttt	eq
 8002734:	6819      	ldreq	r1, [r3, #0]
 8002736:	685b      	ldreq	r3, [r3, #4]
 8002738:	1809      	addeq	r1, r1, r0
 800273a:	6021      	streq	r1, [r4, #0]
 800273c:	e7ed      	b.n	800271a <_free_r+0x1e>
 800273e:	461a      	mov	r2, r3
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	b10b      	cbz	r3, 8002748 <_free_r+0x4c>
 8002744:	42a3      	cmp	r3, r4
 8002746:	d9fa      	bls.n	800273e <_free_r+0x42>
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	1850      	adds	r0, r2, r1
 800274c:	42a0      	cmp	r0, r4
 800274e:	d10b      	bne.n	8002768 <_free_r+0x6c>
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	4401      	add	r1, r0
 8002754:	1850      	adds	r0, r2, r1
 8002756:	4283      	cmp	r3, r0
 8002758:	6011      	str	r1, [r2, #0]
 800275a:	d1e0      	bne.n	800271e <_free_r+0x22>
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4401      	add	r1, r0
 8002762:	6011      	str	r1, [r2, #0]
 8002764:	6053      	str	r3, [r2, #4]
 8002766:	e7da      	b.n	800271e <_free_r+0x22>
 8002768:	d902      	bls.n	8002770 <_free_r+0x74>
 800276a:	230c      	movs	r3, #12
 800276c:	602b      	str	r3, [r5, #0]
 800276e:	e7d6      	b.n	800271e <_free_r+0x22>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	1821      	adds	r1, r4, r0
 8002774:	428b      	cmp	r3, r1
 8002776:	bf01      	itttt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	1809      	addeq	r1, r1, r0
 800277e:	6021      	streq	r1, [r4, #0]
 8002780:	6063      	str	r3, [r4, #4]
 8002782:	6054      	str	r4, [r2, #4]
 8002784:	e7cb      	b.n	800271e <_free_r+0x22>
 8002786:	bd38      	pop	{r3, r4, r5, pc}
 8002788:	20000294 	.word	0x20000294

0800278c <sbrk_aligned>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4e0e      	ldr	r6, [pc, #56]	; (80027c8 <sbrk_aligned+0x3c>)
 8002790:	460c      	mov	r4, r1
 8002792:	6831      	ldr	r1, [r6, #0]
 8002794:	4605      	mov	r5, r0
 8002796:	b911      	cbnz	r1, 800279e <sbrk_aligned+0x12>
 8002798:	f000 f8bc 	bl	8002914 <_sbrk_r>
 800279c:	6030      	str	r0, [r6, #0]
 800279e:	4621      	mov	r1, r4
 80027a0:	4628      	mov	r0, r5
 80027a2:	f000 f8b7 	bl	8002914 <_sbrk_r>
 80027a6:	1c43      	adds	r3, r0, #1
 80027a8:	d00a      	beq.n	80027c0 <sbrk_aligned+0x34>
 80027aa:	1cc4      	adds	r4, r0, #3
 80027ac:	f024 0403 	bic.w	r4, r4, #3
 80027b0:	42a0      	cmp	r0, r4
 80027b2:	d007      	beq.n	80027c4 <sbrk_aligned+0x38>
 80027b4:	1a21      	subs	r1, r4, r0
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 f8ac 	bl	8002914 <_sbrk_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d101      	bne.n	80027c4 <sbrk_aligned+0x38>
 80027c0:	f04f 34ff 	mov.w	r4, #4294967295
 80027c4:	4620      	mov	r0, r4
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	20000298 	.word	0x20000298

080027cc <_malloc_r>:
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d0:	1ccd      	adds	r5, r1, #3
 80027d2:	f025 0503 	bic.w	r5, r5, #3
 80027d6:	3508      	adds	r5, #8
 80027d8:	2d0c      	cmp	r5, #12
 80027da:	bf38      	it	cc
 80027dc:	250c      	movcc	r5, #12
 80027de:	2d00      	cmp	r5, #0
 80027e0:	4607      	mov	r7, r0
 80027e2:	db01      	blt.n	80027e8 <_malloc_r+0x1c>
 80027e4:	42a9      	cmp	r1, r5
 80027e6:	d905      	bls.n	80027f4 <_malloc_r+0x28>
 80027e8:	230c      	movs	r3, #12
 80027ea:	2600      	movs	r6, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4630      	mov	r0, r6
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f4:	4e2e      	ldr	r6, [pc, #184]	; (80028b0 <_malloc_r+0xe4>)
 80027f6:	f000 f89d 	bl	8002934 <__malloc_lock>
 80027fa:	6833      	ldr	r3, [r6, #0]
 80027fc:	461c      	mov	r4, r3
 80027fe:	bb34      	cbnz	r4, 800284e <_malloc_r+0x82>
 8002800:	4629      	mov	r1, r5
 8002802:	4638      	mov	r0, r7
 8002804:	f7ff ffc2 	bl	800278c <sbrk_aligned>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	4604      	mov	r4, r0
 800280c:	d14d      	bne.n	80028aa <_malloc_r+0xde>
 800280e:	6834      	ldr	r4, [r6, #0]
 8002810:	4626      	mov	r6, r4
 8002812:	2e00      	cmp	r6, #0
 8002814:	d140      	bne.n	8002898 <_malloc_r+0xcc>
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	4631      	mov	r1, r6
 800281a:	4638      	mov	r0, r7
 800281c:	eb04 0803 	add.w	r8, r4, r3
 8002820:	f000 f878 	bl	8002914 <_sbrk_r>
 8002824:	4580      	cmp	r8, r0
 8002826:	d13a      	bne.n	800289e <_malloc_r+0xd2>
 8002828:	6821      	ldr	r1, [r4, #0]
 800282a:	3503      	adds	r5, #3
 800282c:	1a6d      	subs	r5, r5, r1
 800282e:	f025 0503 	bic.w	r5, r5, #3
 8002832:	3508      	adds	r5, #8
 8002834:	2d0c      	cmp	r5, #12
 8002836:	bf38      	it	cc
 8002838:	250c      	movcc	r5, #12
 800283a:	4638      	mov	r0, r7
 800283c:	4629      	mov	r1, r5
 800283e:	f7ff ffa5 	bl	800278c <sbrk_aligned>
 8002842:	3001      	adds	r0, #1
 8002844:	d02b      	beq.n	800289e <_malloc_r+0xd2>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	442b      	add	r3, r5
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	e00e      	b.n	800286c <_malloc_r+0xa0>
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	1b52      	subs	r2, r2, r5
 8002852:	d41e      	bmi.n	8002892 <_malloc_r+0xc6>
 8002854:	2a0b      	cmp	r2, #11
 8002856:	d916      	bls.n	8002886 <_malloc_r+0xba>
 8002858:	1961      	adds	r1, r4, r5
 800285a:	42a3      	cmp	r3, r4
 800285c:	6025      	str	r5, [r4, #0]
 800285e:	bf18      	it	ne
 8002860:	6059      	strne	r1, [r3, #4]
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	bf08      	it	eq
 8002866:	6031      	streq	r1, [r6, #0]
 8002868:	5162      	str	r2, [r4, r5]
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	4638      	mov	r0, r7
 800286e:	f104 060b 	add.w	r6, r4, #11
 8002872:	f000 f865 	bl	8002940 <__malloc_unlock>
 8002876:	f026 0607 	bic.w	r6, r6, #7
 800287a:	1d23      	adds	r3, r4, #4
 800287c:	1af2      	subs	r2, r6, r3
 800287e:	d0b6      	beq.n	80027ee <_malloc_r+0x22>
 8002880:	1b9b      	subs	r3, r3, r6
 8002882:	50a3      	str	r3, [r4, r2]
 8002884:	e7b3      	b.n	80027ee <_malloc_r+0x22>
 8002886:	6862      	ldr	r2, [r4, #4]
 8002888:	42a3      	cmp	r3, r4
 800288a:	bf0c      	ite	eq
 800288c:	6032      	streq	r2, [r6, #0]
 800288e:	605a      	strne	r2, [r3, #4]
 8002890:	e7ec      	b.n	800286c <_malloc_r+0xa0>
 8002892:	4623      	mov	r3, r4
 8002894:	6864      	ldr	r4, [r4, #4]
 8002896:	e7b2      	b.n	80027fe <_malloc_r+0x32>
 8002898:	4634      	mov	r4, r6
 800289a:	6876      	ldr	r6, [r6, #4]
 800289c:	e7b9      	b.n	8002812 <_malloc_r+0x46>
 800289e:	230c      	movs	r3, #12
 80028a0:	4638      	mov	r0, r7
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	f000 f84c 	bl	8002940 <__malloc_unlock>
 80028a8:	e7a1      	b.n	80027ee <_malloc_r+0x22>
 80028aa:	6025      	str	r5, [r4, #0]
 80028ac:	e7de      	b.n	800286c <_malloc_r+0xa0>
 80028ae:	bf00      	nop
 80028b0:	20000294 	.word	0x20000294

080028b4 <_realloc_r>:
 80028b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b8:	4680      	mov	r8, r0
 80028ba:	4614      	mov	r4, r2
 80028bc:	460e      	mov	r6, r1
 80028be:	b921      	cbnz	r1, 80028ca <_realloc_r+0x16>
 80028c0:	4611      	mov	r1, r2
 80028c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028c6:	f7ff bf81 	b.w	80027cc <_malloc_r>
 80028ca:	b92a      	cbnz	r2, 80028d8 <_realloc_r+0x24>
 80028cc:	f7ff ff16 	bl	80026fc <_free_r>
 80028d0:	4625      	mov	r5, r4
 80028d2:	4628      	mov	r0, r5
 80028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d8:	f000 f838 	bl	800294c <_malloc_usable_size_r>
 80028dc:	4284      	cmp	r4, r0
 80028de:	4607      	mov	r7, r0
 80028e0:	d802      	bhi.n	80028e8 <_realloc_r+0x34>
 80028e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028e6:	d812      	bhi.n	800290e <_realloc_r+0x5a>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4640      	mov	r0, r8
 80028ec:	f7ff ff6e 	bl	80027cc <_malloc_r>
 80028f0:	4605      	mov	r5, r0
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d0ed      	beq.n	80028d2 <_realloc_r+0x1e>
 80028f6:	42bc      	cmp	r4, r7
 80028f8:	4622      	mov	r2, r4
 80028fa:	4631      	mov	r1, r6
 80028fc:	bf28      	it	cs
 80028fe:	463a      	movcs	r2, r7
 8002900:	f7ff fed4 	bl	80026ac <memcpy>
 8002904:	4631      	mov	r1, r6
 8002906:	4640      	mov	r0, r8
 8002908:	f7ff fef8 	bl	80026fc <_free_r>
 800290c:	e7e1      	b.n	80028d2 <_realloc_r+0x1e>
 800290e:	4635      	mov	r5, r6
 8002910:	e7df      	b.n	80028d2 <_realloc_r+0x1e>
	...

08002914 <_sbrk_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	2300      	movs	r3, #0
 8002918:	4d05      	ldr	r5, [pc, #20]	; (8002930 <_sbrk_r+0x1c>)
 800291a:	4604      	mov	r4, r0
 800291c:	4608      	mov	r0, r1
 800291e:	602b      	str	r3, [r5, #0]
 8002920:	f7ff fb1a 	bl	8001f58 <_sbrk>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d102      	bne.n	800292e <_sbrk_r+0x1a>
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	b103      	cbz	r3, 800292e <_sbrk_r+0x1a>
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	2000029c 	.word	0x2000029c

08002934 <__malloc_lock>:
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <__malloc_lock+0x8>)
 8002936:	f000 b811 	b.w	800295c <__retarget_lock_acquire_recursive>
 800293a:	bf00      	nop
 800293c:	200002a0 	.word	0x200002a0

08002940 <__malloc_unlock>:
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <__malloc_unlock+0x8>)
 8002942:	f000 b80c 	b.w	800295e <__retarget_lock_release_recursive>
 8002946:	bf00      	nop
 8002948:	200002a0 	.word	0x200002a0

0800294c <_malloc_usable_size_r>:
 800294c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002950:	1f18      	subs	r0, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	bfbc      	itt	lt
 8002956:	580b      	ldrlt	r3, [r1, r0]
 8002958:	18c0      	addlt	r0, r0, r3
 800295a:	4770      	bx	lr

0800295c <__retarget_lock_acquire_recursive>:
 800295c:	4770      	bx	lr

0800295e <__retarget_lock_release_recursive>:
 800295e:	4770      	bx	lr

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
