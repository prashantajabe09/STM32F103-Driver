
001_Pulse_Generating_Card_20241129.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002f14  08002f14  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002f14  08002f14  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  08002f14  08002f14  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f14  08002f14  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08002f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001c4  080030e0  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080030e0  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004841  00000000  00000000  000201ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001116  00000000  00000000  00024a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00025b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00025f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003912  00000000  00000000  000262f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004601  00000000  00000000  00029c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c3d2  00000000  00000000  0002e203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003a5d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000118c  00000000  00000000  0003a628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001c4 	.word	0x200001c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002efc 	.word	0x08002efc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001c8 	.word	0x200001c8
 800016c:	08002efc 	.word	0x08002efc

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__gesf2>:
 8000d30:	f04f 3cff 	mov.w	ip, #4294967295
 8000d34:	e006      	b.n	8000d44 <__cmpsf2+0x4>
 8000d36:	bf00      	nop

08000d38 <__lesf2>:
 8000d38:	f04f 0c01 	mov.w	ip, #1
 8000d3c:	e002      	b.n	8000d44 <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__cmpsf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d011      	beq.n	8000d80 <__cmpsf2+0x40>
 8000d5c:	b001      	add	sp, #4
 8000d5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d62:	bf18      	it	ne
 8000d64:	ea90 0f01 	teqne	r0, r1
 8000d68:	bf58      	it	pl
 8000d6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d6e:	bf88      	it	hi
 8000d70:	17c8      	asrhi	r0, r1, #31
 8000d72:	bf38      	it	cc
 8000d74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d78:	bf18      	it	ne
 8000d7a:	f040 0001 	orrne.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	d102      	bne.n	8000d8c <__cmpsf2+0x4c>
 8000d86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8a:	d105      	bne.n	8000d98 <__cmpsf2+0x58>
 8000d8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d90:	d1e4      	bne.n	8000d5c <__cmpsf2+0x1c>
 8000d92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d96:	d0e1      	beq.n	8000d5c <__cmpsf2+0x1c>
 8000d98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__aeabi_cfrcmple>:
 8000da0:	4684      	mov	ip, r0
 8000da2:	4608      	mov	r0, r1
 8000da4:	4661      	mov	r1, ip
 8000da6:	e7ff      	b.n	8000da8 <__aeabi_cfcmpeq>

08000da8 <__aeabi_cfcmpeq>:
 8000da8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000daa:	f7ff ffc9 	bl	8000d40 <__cmpsf2>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	bf48      	it	mi
 8000db2:	f110 0f00 	cmnmi.w	r0, #0
 8000db6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000db8 <__aeabi_fcmpeq>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff fff4 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2001      	moveq	r0, #1
 8000dc4:	2000      	movne	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmplt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffea 	bl	8000da8 <__aeabi_cfcmpeq>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmple>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffe0 	bl	8000da8 <__aeabi_cfcmpeq>
 8000de8:	bf94      	ite	ls
 8000dea:	2001      	movls	r0, #1
 8000dec:	2000      	movhi	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmpge>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffd2 	bl	8000da0 <__aeabi_cfrcmple>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpgt>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffc8 	bl	8000da0 <__aeabi_cfrcmple>
 8000e10:	bf34      	ite	cc
 8000e12:	2001      	movcc	r0, #1
 8000e14:	2000      	movcs	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_f2iz>:
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e24:	d30f      	bcc.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_f2iz+0x30>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e40:	bf18      	it	ne
 8000e42:	4240      	negne	r0, r0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2iz+0x3a>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d105      	bne.n	8000e62 <__aeabi_f2iz+0x46>
 8000e56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_f2uiz>:
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	d20e      	bcs.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e70:	d30b      	bcc.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e7a:	d409      	bmi.n	8000e90 <__aeabi_f2uiz+0x28>
 8000e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e84:	fa23 f002 	lsr.w	r0, r3, r2
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr
 8000e90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e94:	d101      	bne.n	8000e9a <__aeabi_f2uiz+0x32>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d102      	bne.n	8000ea0 <__aeabi_f2uiz+0x38>
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <clock_init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <clock_init+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	78db      	ldrb	r3, [r3, #3]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8c2 	bl	800103c <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <clock_init+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	791b      	ldrb	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8d6 	bl	8001070 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <clock_init+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	795b      	ldrb	r3, [r3, #5]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f8ea 	bl	80010a4 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <clock_init+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	789a      	ldrb	r2, [r3, #2]
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <clock_init+0x68>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f882 	bl	8000fe8 <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <clock_init+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f812 	bl	8000f14 <system_clock_set>

	ahb_peripheral_clock_en(AHB_PERIPHERAL_CLOCK_EN);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f915 	bl	8001120 <ahb_peripheral_clock_en>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8000ef6:	f641 001d 	movw	r0, #6173	; 0x181d
 8000efa:	f000 f8ed 	bl	80010d8 <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8000efe:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8000f02:	f000 f8fb 	bl	80010fc <apb1_peripheral_clock_en>

	lsi_clock_en();
 8000f06:	f000 f9d9 	bl	80012bc <lsi_clock_en>

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d11f      	bne.n	8000f68 <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <system_clock_set+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <system_clock_set+0xd0>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8000f34:	bf00      	nop
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <system_clock_set+0xd0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f9      	beq.n	8000f36 <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <system_clock_set+0xd0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <system_clock_set+0xd0>)
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <system_clock_set+0xd0>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <system_clock_set+0xd0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <system_clock_set+0xd0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <system_clock_set+0xd0>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e037      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <system_clock_set+0xd0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <system_clock_set+0xd0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8000f7a:	bf00      	nop
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <system_clock_set+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <system_clock_set+0xd0>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <system_clock_set+0xd0>)
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <system_clock_set+0xd0>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <system_clock_set+0xd0>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	6053      	str	r3, [r2, #4]
 8000f9c:	e01c      	b.n	8000fd8 <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d119      	bne.n	8000fd8 <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <system_clock_set+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <system_clock_set+0xd0>)
 8000faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fae:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8000fb0:	bf00      	nop
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <system_clock_set+0xd0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f9      	beq.n	8000fb2 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <system_clock_set+0xd0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <system_clock_set+0xd0>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8000fca:	bf00      	nop
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <system_clock_set+0xd0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d1f9      	bne.n	8000fcc <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <pll_clk_config+0x50>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <pll_clk_config+0x50>)
 8000ffe:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001002:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <pll_clk_config+0x50>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	79ba      	ldrb	r2, [r7, #6]
 800100a:	0492      	lsls	r2, r2, #18
 800100c:	4611      	mov	r1, r2
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <pll_clk_config+0x50>)
 8001010:	430b      	orrs	r3, r1
 8001012:	6053      	str	r3, [r2, #4]
	 RCC->CFGR &= ~(1 << 16);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <pll_clk_config+0x50>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <pll_clk_config+0x50>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <pll_clk_config+0x50>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4904      	ldr	r1, [pc, #16]	; (8001038 <pll_clk_config+0x50>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
     return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000

0800103c <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <ahb_clk_set+0x30>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <ahb_clk_set+0x30>)
 800104c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001050:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <ahb_clk_set+0x30>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	4611      	mov	r1, r2
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <ahb_clk_set+0x30>)
 800105e:	430b      	orrs	r3, r1
 8001060:	6053      	str	r3, [r2, #4]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <apb1_clk_set+0x30>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <apb1_clk_set+0x30>)
 8001080:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001084:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <apb1_clk_set+0x30>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	0212      	lsls	r2, r2, #8
 800108e:	4611      	mov	r1, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <apb1_clk_set+0x30>)
 8001092:	430b      	orrs	r3, r1
 8001094:	6053      	str	r3, [r2, #4]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000

080010a4 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <apb2_clk_set+0x30>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <apb2_clk_set+0x30>)
 80010b4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80010b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <apb2_clk_set+0x30>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	02d2      	lsls	r2, r2, #11
 80010c2:	4611      	mov	r1, r2
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <apb2_clk_set+0x30>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6053      	str	r3, [r2, #4]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000

080010d8 <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	4904      	ldr	r1, [pc, #16]	; (80010f8 <apb2_peripheral_clock_en+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	618b      	str	r3, [r1, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <apb1_peripheral_clock_en+0x20>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4904      	ldr	r1, [pc, #16]	; (800111c <apb1_peripheral_clock_en+0x20>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <ahb_peripheral_clock_en>:


void ahb_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= clock_en_parameter;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <ahb_peripheral_clock_en+0x20>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	4904      	ldr	r1, [pc, #16]	; (8001140 <ahb_peripheral_clock_en+0x20>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	614b      	str	r3, [r1, #20]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <apb_get_clock+0xe4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <apb_get_clock+0xe8>)
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e011      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <apb_get_clock+0xe8>)
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e00b      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 800117a:	f000 f85d 	bl	8001238 <get_pll_clock>
 800117e:	61f8      	str	r0, [r7, #28]
 8001180:	e004      	b.n	800118c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d101      	bne.n	800118c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <apb_get_clock+0xe4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d802      	bhi.n	80011a4 <apb_get_clock+0x60>
	{
		ahbp = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	e005      	b.n	80011b0 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <apb_get_clock+0xec>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d114      	bne.n	80011e0 <apb_get_clock+0x9c>
	{
		temp = ((RCC->CFGR >> 10) && 0x7);
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <apb_get_clock+0xe4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d802      	bhi.n	80011d4 <apb_get_clock+0x90>
		{
			apbp = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e005      	b.n	80011e0 <apb_get_clock+0x9c>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b04      	subs	r3, #4
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <apb_get_clock+0xf0>)
 80011da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011de:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d114      	bne.n	8001210 <apb_get_clock+0xcc>
	{
		temp = ((RCC->CFGR >> 13) && 0x7);
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <apb_get_clock+0xe4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	0b5b      	lsrs	r3, r3, #13
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf14      	ite	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	2300      	moveq	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d802      	bhi.n	8001204 <apb_get_clock+0xc0>
		{
			apbp = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e005      	b.n	8001210 <apb_get_clock+0xcc>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3b04      	subs	r3, #4
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <apb_get_clock+0xf0>)
 800120a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800120e:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fbb2 f2f3 	udiv	r2, r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3

}
 800121e:	4618      	mov	r0, r3
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	007a1200 	.word	0x007a1200
 8001230:	2000000c 	.word	0x2000000c
 8001234:	2000001c 	.word	0x2000001c

08001238 <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <get_pll_clock+0x74>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <get_pll_clock+0x74>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <get_pll_clock+0x74>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	0c5b      	lsrs	r3, r3, #17
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <get_pll_clock+0x78>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <get_pll_clock+0x7c>)
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e00e      	b.n	80012a0 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <get_pll_clock+0x80>)
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4907      	ldr	r1, [pc, #28]	; (80012b0 <get_pll_clock+0x78>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	440a      	add	r2, r1
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	20000024 	.word	0x20000024
 80012b4:	003d0900 	.word	0x003d0900
 80012b8:	007a1200 	.word	0x007a1200

080012bc <lsi_clock_en>:

void lsi_clock_en(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	RCC->CSR |= (1 << LSI_CLOCK_EN_BIT_POSITION_CSR);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <lsi_clock_en+0x28>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <lsi_clock_en+0x28>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6253      	str	r3, [r2, #36]	; 0x24
	while(!(RCC->CSR & IS_LSI_CLOCK_READY)){;}
 80012cc:	bf00      	nop
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <lsi_clock_en+0x28>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f9      	beq.n	80012ce <lsi_clock_en+0x12>
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000

080012e8 <dmax_channel_init>:
		[CHANNEL_7 - 1] = {(uint32_t)&tx_buffer_data[0], (uint32_t)&(USART2->DR),0,LOW,READ_FROM_PERIPHERAL,CIRCULAR_MODE_DI,INCREMENT_MODE_DI,INCREMENT_MODE_EN,MS_8_BITS,TC_INTERRUPT_EN,DMA_CHANNEL_7_GLOBAL_IRQn,DISABLE}
	};


void dmax_channel_init(dma1_regdef_t *p_dma_x,uint8_t channel)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	p_dma_x->dma_channel[channel - 1].CMAR = dma1_channel_configuration[channel - 1].source_address;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	1e59      	subs	r1, r3, #1
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	4898      	ldr	r0, [pc, #608]	; (8001560 <dmax_channel_init+0x278>)
 80012fe:	460b      	mov	r3, r1
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	440b      	add	r3, r1
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4403      	add	r3, r0
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4403      	add	r3, r0
 8001316:	3314      	adds	r3, #20
 8001318:	6019      	str	r1, [r3, #0]

	p_dma_x->dma_channel[channel - 1].CPAR = dma1_channel_configuration[channel - 1].destination_address;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	1e59      	subs	r1, r3, #1
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	488f      	ldr	r0, [pc, #572]	; (8001560 <dmax_channel_init+0x278>)
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4403      	add	r3, r0
 800132e:	3304      	adds	r3, #4
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4403      	add	r3, r0
 800133e:	3310      	adds	r3, #16
 8001340:	6019      	str	r1, [r3, #0]

	p_dma_x->dma_channel[channel - 1].CNDTR = dma1_channel_configuration[channel - 1].data_count;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	1e59      	subs	r1, r3, #1
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	4885      	ldr	r0, [pc, #532]	; (8001560 <dmax_channel_init+0x278>)
 800134c:	460b      	mov	r3, r1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	440b      	add	r3, r1
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4403      	add	r3, r0
 8001356:	3308      	adds	r3, #8
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	330c      	adds	r3, #12
 8001368:	6019      	str	r1, [r3, #0]

	if (dma1_channel_configuration[channel - 1].direction){
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	497c      	ldr	r1, [pc, #496]	; (8001560 <dmax_channel_init+0x278>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3310      	adds	r3, #16
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <dmax_channel_init+0xc8>
		p_dma_x->dma_channel[channel - 1].CCR |= DMA_DIRECTION_BIT_POSTION;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	1e5a      	subs	r2, r3, #1
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3308      	adds	r3, #8
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	3a01      	subs	r2, #1
 800139a:	f043 0110 	orr.w	r1, r3, #16
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	3308      	adds	r3, #8
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	e015      	b.n	80013dc <dmax_channel_init+0xf4>
	}
	else
	{
		p_dma_x->dma_channel[channel - 1].CCR &= ~DMA_DIRECTION_BIT_POSTION;
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	78fa      	ldrb	r2, [r7, #3]
 80013c6:	3a01      	subs	r2, #1
 80013c8:	f023 0110 	bic.w	r1, r3, #16
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4403      	add	r3, r0
 80013d8:	3308      	adds	r3, #8
 80013da:	6019      	str	r1, [r3, #0]
	}

	p_dma_x->dma_channel[channel - 1].CCR &= ~(DMA_PRIORITY_BIT_POS_MASK);
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	1e5a      	subs	r2, r3, #1
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3308      	adds	r3, #8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	3a01      	subs	r2, #1
 80013f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4403      	add	r3, r0
 8001404:	3308      	adds	r3, #8
 8001406:	6019      	str	r1, [r3, #0]
	p_dma_x->dma_channel[channel - 1].CCR |= (dma1_channel_configuration[channel - 1].priority_level << DMA_PRIORITY_BIT_POSITON);
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3308      	adds	r3, #8
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	484f      	ldr	r0, [pc, #316]	; (8001560 <dmax_channel_init+0x278>)
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4403      	add	r3, r0
 800142c:	330c      	adds	r3, #12
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	3a01      	subs	r2, #1
 8001436:	4319      	orrs	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4403      	add	r3, r0
 8001444:	3308      	adds	r3, #8
 8001446:	6019      	str	r1, [r3, #0]

	if (dma1_channel_configuration[channel - 1].circular_mode){
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	4944      	ldr	r1, [pc, #272]	; (8001560 <dmax_channel_init+0x278>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3311      	adds	r3, #17
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d016      	beq.n	800148e <dmax_channel_init+0x1a6>
		p_dma_x->dma_channel[channel - 1].CCR |= DMA_CIRCULAR_MODE_BTI_POSTION;
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3308      	adds	r3, #8
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	3a01      	subs	r2, #1
 8001478:	f043 0120 	orr.w	r1, r3, #32
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4403      	add	r3, r0
 8001488:	3308      	adds	r3, #8
 800148a:	6019      	str	r1, [r3, #0]
 800148c:	e015      	b.n	80014ba <dmax_channel_init+0x1d2>
	}
	else
	{
		p_dma_x->dma_channel[channel - 1].CCR &= ~DMA_CIRCULAR_MODE_BTI_POSTION;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3308      	adds	r3, #8
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	3a01      	subs	r2, #1
 80014a6:	f023 0120 	bic.w	r1, r3, #32
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3308      	adds	r3, #8
 80014b8:	6019      	str	r1, [r3, #0]
	}

	// TO DO: Data size default to 8 bit and increment mode default. write fucntion to do that.
	// TO DO: Write the function to set appropirate interrupt as currently just setting the TC interrupt
	p_dma_x->dma_channel[channel - 1].CCR |= (1 << 7);
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3308      	adds	r3, #8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4403      	add	r3, r0
 80014e2:	3308      	adds	r3, #8
 80014e4:	6019      	str	r1, [r3, #0]
	p_dma_x->dma_channel[channel - 1].CCR |= dma1_channel_configuration[channel - 1].interrupt_type;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3308      	adds	r3, #8
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	4818      	ldr	r0, [pc, #96]	; (8001560 <dmax_channel_init+0x278>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4403      	add	r3, r0
 800150a:	3315      	adds	r3, #21
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	4301      	orrs	r1, r0
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4403      	add	r3, r0
 8001522:	3308      	adds	r3, #8
 8001524:	6019      	str	r1, [r3, #0]
	if (dma1_channel_configuration[channel - 1].interrupt_type != 0)
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <dmax_channel_init+0x278>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3315      	adds	r3, #21
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00c      	beq.n	8001558 <dmax_channel_init+0x270>
		nvic_en_irq(dma1_channel_configuration[channel - 1].dma_channel_irqn);
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	4907      	ldr	r1, [pc, #28]	; (8001560 <dmax_channel_init+0x278>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3316      	adds	r3, #22
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fd42 	bl	8001fdc <nvic_en_irq>
	if (dma1_channel_configuration[channel - 1].en_di)
	{

	}
		//p_dma_x->dma_channel[channel - 1].CCR |= (1 << 0);
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000034 	.word	0x20000034

08001564 <dma_counter_set>:


void dma_counter_set(dma1_regdef_t *p_dma_x,uint8_t channel, uint16_t data_len)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	4613      	mov	r3, r2
 8001572:	803b      	strh	r3, [r7, #0]
	p_dma_x->dma_channel[channel - 1].CNDTR = data_len;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	8839      	ldrh	r1, [r7, #0]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	330c      	adds	r3, #12
 8001588:	6019      	str	r1, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <dma_channel_en>:


void dma_channel_en(dma1_regdef_t *p_dma_x,uint8_t channel, uint16_t en_di)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
 80015a0:	4613      	mov	r3, r2
 80015a2:	803b      	strh	r3, [r7, #0]
	if (en_di)
 80015a4:	883b      	ldrh	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d016      	beq.n	80015d8 <dma_channel_en+0x44>
		p_dma_x->dma_channel[channel - 1].CCR |= (1 << 0);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3308      	adds	r3, #8
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	f043 0101 	orr.w	r1, r3, #1
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4403      	add	r3, r0
 80015d2:	3308      	adds	r3, #8
 80015d4:	6019      	str	r1, [r3, #0]
	else
		p_dma_x->dma_channel[channel - 1].CCR &= ~(1 << 0);
}
 80015d6:	e015      	b.n	8001604 <dma_channel_en+0x70>
		p_dma_x->dma_channel[channel - 1].CCR &= ~(1 << 0);
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3308      	adds	r3, #8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	3a01      	subs	r2, #1
 80015f0:	f023 0101 	bic.w	r1, r3, #1
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4403      	add	r3, r0
 8001600:	3308      	adds	r3, #8
 8001602:	6019      	str	r1, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <dma1_channel6_interrupt_handling>:

void dma1_channel6_interrupt_handling(dma1_regdef_t *p_dma_x,usartx_regdef_t *p_usartx)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	if ( (p_dma_x->ISR >> 20) & 0x01)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0d1b      	lsrs	r3, r3, #20
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <dma1_channel6_interrupt_handling+0x24>
	{
		p_dma_x->IFCR |= (1 << 20);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	605a      	str	r2, [r3, #4]
	}
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <dma1_channel7_interrupt_handling>:

void dma1_channel7_interrupt_handling(dma1_regdef_t *p_dma_x,usartx_regdef_t *p_usartx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	if ( (p_dma_x->ISR >> 24) & 0x01)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e1b      	lsrs	r3, r3, #24
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <dma1_channel7_interrupt_handling+0x24>
	{
		p_dma_x->IFCR |= (1 << 24);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	605a      	str	r2, [r3, #4]

	}
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <dma1_channel4_interrupt_handling>:

void dma1_channel4_interrupt_handling(dma1_regdef_t *p_dma_x,i2cx_regdef_t *p_i2cx)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]

	if ( (p_dma_x->ISR >> 12) & 0x01)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0b1b      	lsrs	r3, r3, #12
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d029      	beq.n	80016d8 <dma1_channel4_interrupt_handling+0x6c>
	{
		p_dma_x->IFCR |= (1 << 12);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	605a      	str	r2, [r3, #4]
		dma_channel_en(DMA1,CHANNEL_4,DI);
 8001690:	2200      	movs	r2, #0
 8001692:	2104      	movs	r1, #4
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <dma1_channel4_interrupt_handling+0x74>)
 8001696:	f7ff ff7d 	bl	8001594 <dma_channel_en>
		if (!flag_dma_based_read)
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <dma1_channel4_interrupt_handling+0x78>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10b      	bne.n	80016ba <dma1_channel4_interrupt_handling+0x4e>
		{
			while(!get_flag_status_sr1(p_i2cx,FLAG_BTF_SR1));//waite for BTF to set.
 80016a2:	bf00      	nop
 80016a4:	2104      	movs	r1, #4
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f000 fab4 	bl	8001c14 <get_flag_status_sr1>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <dma1_channel4_interrupt_handling+0x38>
			send_stop(p_i2cx); // send stop
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f000 fa9c 	bl	8001bf0 <send_stop>
			while(!get_flag_status_sr1(p_i2cx,FLAG_BTF_SR1));//waite for BTF to set.
			send_repeated_start(I2C2);
		}
	}

}
 80016b8:	e00e      	b.n	80016d8 <dma1_channel4_interrupt_handling+0x6c>
		else if(flag_dma_based_read)
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <dma1_channel4_interrupt_handling+0x78>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <dma1_channel4_interrupt_handling+0x6c>
			while(!get_flag_status_sr1(p_i2cx,FLAG_BTF_SR1));//waite for BTF to set.
 80016c2:	bf00      	nop
 80016c4:	2104      	movs	r1, #4
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f000 faa4 	bl	8001c14 <get_flag_status_sr1>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f8      	beq.n	80016c4 <dma1_channel4_interrupt_handling+0x58>
			send_repeated_start(I2C2);
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <dma1_channel4_interrupt_handling+0x7c>)
 80016d4:	f000 fb02 	bl	8001cdc <send_repeated_start>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40020000 	.word	0x40020000
 80016e4:	20000230 	.word	0x20000230
 80016e8:	40005800 	.word	0x40005800

080016ec <dma1_channel5_interrupt_handling>:

void dma1_channel5_interrupt_handling(dma1_regdef_t *p_dma_x,i2cx_regdef_t *p_i2cx)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]

	if ( (p_dma_x->ISR >> 16) & 0x01)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00e      	beq.n	8001722 <dma1_channel5_interrupt_handling+0x36>
	{
		p_dma_x->IFCR |= (1 << 16);						 //clear the interrupt
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	605a      	str	r2, [r3, #4]
		p_i2cx->CR2 &= ~(1 << DMA_EN_BI_POSITION_CR2);	 //Disable the DMA
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	605a      	str	r2, [r3, #4]
		//while(!get_flag_status_sr1(p_i2cx,FLAG_BTF_SR1));//waite for BTF to set.
		send_stop(p_i2cx); // send stop
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f000 fa67 	bl	8001bf0 <send_stop>
	}

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	dma1_channel4_interrupt_handling(DMA1,I2C2);
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <DMA1_Channel4_IRQHandler+0x10>)
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <DMA1_Channel4_IRQHandler+0x14>)
 8001734:	f7ff ff9a 	bl	800166c <dma1_channel4_interrupt_handling>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005800 	.word	0x40005800
 8001740:	40020000 	.word	0x40020000

08001744 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	dma1_channel5_interrupt_handling(DMA1,I2C2);
 8001748:	4902      	ldr	r1, [pc, #8]	; (8001754 <DMA1_Channel5_IRQHandler+0x10>)
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <DMA1_Channel5_IRQHandler+0x14>)
 800174c:	f7ff ffce 	bl	80016ec <dma1_channel5_interrupt_handling>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005800 	.word	0x40005800
 8001758:	40020000 	.word	0x40020000

0800175c <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	dma1_channel6_interrupt_handling(DMA1,USART2);
 8001760:	4902      	ldr	r1, [pc, #8]	; (800176c <DMA1_Channel6_IRQHandler+0x10>)
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <DMA1_Channel6_IRQHandler+0x14>)
 8001764:	f7ff ff53 	bl	800160e <dma1_channel6_interrupt_handling>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40004400 	.word	0x40004400
 8001770:	40020000 	.word	0x40020000

08001774 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	dma1_channel7_interrupt_handling(DMA1,USART2);
 8001778:	4902      	ldr	r1, [pc, #8]	; (8001784 <DMA1_Channel7_IRQHandler+0x10>)
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <DMA1_Channel7_IRQHandler+0x14>)
 800177c:	f7ff ff5e 	bl	800163c <dma1_channel7_interrupt_handling>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40004400 	.word	0x40004400
 8001788:	40020000 	.word	0x40020000

0800178c <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <io_init>:
	}
}


void io_init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 80017ce:	2302      	movs	r3, #2
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	e00b      	b.n	80017ec <io_init+0x24>
	{
		io_config(io,&io_initial_config[io]);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <io_init+0x34>)
 80017da:	441a      	add	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f80d 	bl	8001800 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3301      	adds	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b30      	cmp	r3, #48	; 0x30
 80017f0:	d9f0      	bls.n	80017d4 <io_init+0xc>
	}
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200000dc 	.word	0x200000dc

08001800 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7819      	ldrb	r1, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	785a      	ldrb	r2, [r3, #1]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f804 	bl	8001824 <io_set_io_mode>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	460b      	mov	r3, r1
 8001830:	71bb      	strb	r3, [r7, #6]
 8001832:	4613      	mov	r3, r2
 8001834:	717b      	strb	r3, [r7, #5]
	pin = io_pin_bit(io);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ffb7 	bl	80017ac <io_pin_bit>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <io_set_io_mode+0xd0>)
 8001844:	701a      	strb	r2, [r3, #0]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff9f 	bl	800178c <io_port>
 800184e:	4603      	mov	r3, r0
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001856:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800185a:	60fb      	str	r3, [r7, #12]
	if (pin < 8)
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <io_set_io_mode+0xd0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d81e      	bhi.n	80018a2 <io_set_io_mode+0x7e>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <io_set_io_mode+0xd0>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	210f      	movs	r1, #15
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	79b9      	ldrb	r1, [r7, #6]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <io_set_io_mode+0xd0>)
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4091      	lsls	r1, r2
 800188a:	7978      	ldrb	r0, [r7, #5]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <io_set_io_mode+0xd0>)
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	3202      	adds	r2, #2
 8001894:	fa00 f202 	lsl.w	r2, r0, r2
 8001898:	430a      	orrs	r2, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 80018a0:	e024      	b.n	80018ec <io_set_io_mode+0xc8>
		pin %= 8;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <io_set_io_mode+0xd0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <io_set_io_mode+0xd0>)
 80018ae:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <io_set_io_mode+0xd0>)
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	210f      	movs	r1, #15
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	43d2      	mvns	r2, r2
 80018c2:	401a      	ands	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	79b9      	ldrb	r1, [r7, #6]
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <io_set_io_mode+0xd0>)
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4091      	lsls	r1, r2
 80018d6:	7978      	ldrb	r0, [r7, #5]
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <io_set_io_mode+0xd0>)
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	3202      	adds	r2, #2
 80018e0:	fa00 f202 	lsl.w	r2, r0, r2
 80018e4:	430a      	orrs	r2, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200001e1 	.word	0x200001e1

080018f8 <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff3e 	bl	800178c <io_port>
 8001910:	4603      	mov	r3, r0
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001918:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800191c:	60fb      	str	r3, [r7, #12]
	switch(out){
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <io_set_out+0x4e>
 8001924:	2b01      	cmp	r3, #1
 8001926:	d11d      	bne.n	8001964 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff3e 	bl	80017ac <io_pin_bit>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	2301      	movs	r3, #1
 8001936:	4093      	lsls	r3, r2
 8001938:	43da      	mvns	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	401a      	ands	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	60da      	str	r2, [r3, #12]
		break;
 8001944:	e00e      	b.n	8001964 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff2f 	bl	80017ac <io_pin_bit>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	2301      	movs	r3, #1
 8001954:	fa03 f202 	lsl.w	r2, r3, r2
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	60da      	str	r2, [r3, #12]
		break;
 8001962:	bf00      	nop
	}
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <EXTI4_IRQHandler>:
	return (Port->IDR & (1 << io_pin_bit(io)));
}


void EXTI4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <EXTI4_IRQHandler+0x48>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d018      	beq.n	80019ae <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <EXTI4_IRQHandler+0x48>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <EXTI4_IRQHandler+0x48>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <EXTI4_IRQHandler+0x4c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 8001990:	2100      	movs	r1, #0
 8001992:	202d      	movs	r0, #45	; 0x2d
 8001994:	f7ff ffb0 	bl	80018f8 <io_set_out>
			flag_led_on = 1;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <EXTI4_IRQHandler+0x4c>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
		{
			LED_OFF();
			flag_led_on = 0;
		}
	}
}
 800199e:	e006      	b.n	80019ae <EXTI4_IRQHandler+0x42>
			LED_OFF();
 80019a0:	2101      	movs	r1, #1
 80019a2:	202d      	movs	r0, #45	; 0x2d
 80019a4:	f7ff ffa8 	bl	80018f8 <io_set_out>
			flag_led_on = 0;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EXTI4_IRQHandler+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010400 	.word	0x40010400
 80019b8:	200001e0 	.word	0x200001e0

080019bc <i2cx_init>:
#define I2C_CR1_STP   (1 << 9)
#define I2C_SR1_TXE	  (1 << 7)
#define I2C_SR1_RXNE  (1 << 6)

void i2cx_init(i2cx_regdef_t *p_i2cx, uint8_t channel)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	i2cx_reset(p_i2cx);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 faeb 	bl	8001fa4 <i2cx_reset>
	// Master mode selection
	if (i2c_channel[channel].master_mode)
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	497c      	ldr	r1, [pc, #496]	; (8001bc4 <i2cx_init+0x208>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00f      	beq.n	8001a02 <i2cx_init+0x46>
		p_i2cx->CCR |= i2c_channel[channel].master_mode << MASTER_MODE_SELECTION_BIT_POSITION_CCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69d9      	ldr	r1, [r3, #28]
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	4876      	ldr	r0, [pc, #472]	; (8001bc4 <i2cx_init+0x208>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4403      	add	r3, r0
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	03db      	lsls	r3, r3, #15
 80019f8:	ea41 0203 	orr.w	r2, r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	61da      	str	r2, [r3, #28]
 8001a00:	e005      	b.n	8001a0e <i2cx_init+0x52>
	else
		p_i2cx->CCR &= ~(1 << MASTER_MODE_SELECTION_BIT_POSITION_CCR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	61da      	str	r2, [r3, #28]

	// DMA Mode selection
	if (i2c_channel[channel].dma_en_di)
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	496c      	ldr	r1, [pc, #432]	; (8001bc4 <i2cx_init+0x208>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <i2cx_init+0x8a>
		p_i2cx->CR2 |= i2c_channel[channel].dma_en_di << DMA_EN_BI_POSITION_CR2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4866      	ldr	r0, [pc, #408]	; (8001bc4 <i2cx_init+0x208>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4403      	add	r3, r0
 8001a36:	3301      	adds	r3, #1
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	02db      	lsls	r3, r3, #11
 8001a3c:	ea41 0203 	orr.w	r2, r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	e005      	b.n	8001a52 <i2cx_init+0x96>
	else
		p_i2cx->CR2 &= ~(1 << DMA_EN_BI_POSITION_CR2);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	605a      	str	r2, [r3, #4]

	//buffer interrupt en or di
	if (i2c_channel[channel].it_buf_en)
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	495b      	ldr	r1, [pc, #364]	; (8001bc4 <i2cx_init+0x208>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3302      	adds	r3, #2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <i2cx_init+0xce>
		p_i2cx->CR2 |= i2c_channel[channel].it_buf_en << IT_BUF_EN_BIT_POSTITION_CR2;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	4855      	ldr	r0, [pc, #340]	; (8001bc4 <i2cx_init+0x208>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4403      	add	r3, r0
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	ea41 0203 	orr.w	r2, r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	e005      	b.n	8001a96 <i2cx_init+0xda>
	else
		p_i2cx->CR2 &= ~(1 << IT_BUF_EN_BIT_POSTITION_CR2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]

	//Event interrupt en or di
	if (i2c_channel[channel].it_evt_en)
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	494a      	ldr	r1, [pc, #296]	; (8001bc4 <i2cx_init+0x208>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <i2cx_init+0x112>
			p_i2cx->CR2 |= i2c_channel[channel].it_evt_en << IT_EVT_EN_BIT_POSTITION_CR2;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4844      	ldr	r0, [pc, #272]	; (8001bc4 <i2cx_init+0x208>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4403      	add	r3, r0
 8001abe:	3303      	adds	r3, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	ea41 0203 	orr.w	r2, r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	e005      	b.n	8001ada <i2cx_init+0x11e>
		else
			p_i2cx->CR2 &= ~(1 << IT_EVT_EN_BIT_POSTITION_CR2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	605a      	str	r2, [r3, #4]

	//error interrupt en or di
	if (i2c_channel[channel].it_err_en)
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	4939      	ldr	r1, [pc, #228]	; (8001bc4 <i2cx_init+0x208>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3304      	adds	r3, #4
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <i2cx_init+0x156>
			p_i2cx->CR2 |= i2c_channel[channel].it_err_en << IT_ERR_EN_BIT_POSTITION_CR2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	4833      	ldr	r0, [pc, #204]	; (8001bc4 <i2cx_init+0x208>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4403      	add	r3, r0
 8001b02:	3304      	adds	r3, #4
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	ea41 0203 	orr.w	r2, r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	e005      	b.n	8001b1e <i2cx_init+0x162>
		else
			p_i2cx->CR2 &= ~(1 << IT_ERR_EN_BIT_POSTITION_CR2);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	605a      	str	r2, [r3, #4]

	//peripheral clock Frequency
	p_i2cx->CR2 |= i2c_channel[channel].peripheral_clock_freq;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <i2cx_init+0x208>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4403      	add	r3, r0
 8001b30:	3305      	adds	r3, #5
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	ea41 0203 	orr.w	r2, r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]

	// CCR value. Must be configured when I2C is disbaled.
	p_i2cx->CCR |= i2c_channel[channel].ccr;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69d9      	ldr	r1, [r3, #28]
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <i2cx_init+0x208>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3308      	adds	r3, #8
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	ea41 0203 	orr.w	r2, r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	61da      	str	r2, [r3, #28]

	// FM duty cycle
	if (i2c_channel[channel].fm_duty_cycle)
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	4919      	ldr	r1, [pc, #100]	; (8001bc4 <i2cx_init+0x208>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	330c      	adds	r3, #12
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <i2cx_init+0x1c2>
		p_i2cx->CCR |= (FM_DUTY_CYCLE_16_9 << FM_DUTY_CYCLE_BIT_POSITION_CRR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	61da      	str	r2, [r3, #28]
 8001b7c:	e005      	b.n	8001b8a <i2cx_init+0x1ce>
	else
		p_i2cx->CCR &= ~(1 << FM_DUTY_CYCLE_BIT_POSITION_CRR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	61da      	str	r2, [r3, #28]

	// Trise value
	p_i2cx->TRISE |= i2c_channel[channel].trise;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a19      	ldr	r1, [r3, #32]
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <i2cx_init+0x208>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4403      	add	r3, r0
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	ea41 0203 	orr.w	r2, r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	621a      	str	r2, [r3, #32]

	// enable the start bit set interrupt. control bit --> ITEVFEN, event flag SB.
	i2cx_en(p_i2cx);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f888 	bl	8001cbe <i2cx_en>
	i2c_ack_en(p_i2cx);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f858 	bl	8001c64 <i2c_ack_en>
	nvic_en_irq(I2C2_EV_IRQn);
 8001bb4:	2021      	movs	r0, #33	; 0x21
 8001bb6:	f000 fa11 	bl	8001fdc <nvic_en_irq>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000013c 	.word	0x2000013c

08001bc8 <write_7_bit_device_address>:
		I2C2->CR1 |= (1 << START_CONDITION_BIT_POSITION_CR1);

}

void write_7_bit_device_address(i2cx_regdef_t *p_i2cx, uint8_t address,uint8_t dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	70bb      	strb	r3, [r7, #2]
	p_i2cx->DR = (address | dir);
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <send_stop>:
	p_i2cx->DR = *buffer;
}


void send_stop(i2cx_regdef_t *p_i2cx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	I2C2->CR1 |= I2C_CR1_STP;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <send_stop+0x20>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <send_stop+0x20>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40005800 	.word	0x40005800

08001c14 <get_flag_status_sr1>:
	while(!get_flag_status_sr1(p_i2cx,FLAG_BTF_SR1));
	send_stop(p_i2cx);
}

uint8_t get_flag_status_sr1(i2cx_regdef_t *p_i2cx, uint8_t flag)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]

	if (p_i2cx->SR1 & flag)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <get_flag_status_sr1+0x1c>
	{
		return 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <get_flag_status_sr1+0x1e>
	}
	else
	{
		return 0;
 8001c30:	2300      	movs	r3, #0
	}
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <get_flag_status_sr2>:

uint8_t get_flag_status_sr2(i2cx_regdef_t *p_i2cx, uint8_t flag)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]

	if (p_i2cx->SR2 & flag)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <get_flag_status_sr2+0x1c>
	{
		return 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <get_flag_status_sr2+0x1e>
	}
	else
	{
		return 0;
 8001c58:	2300      	movs	r3, #0
	}
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <i2c_ack_en>:

void i2c_ack_en(i2cx_regdef_t *p_i2cx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	p_i2cx->CR1 |= (1 << ACK_BIT_POSITION_CR1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	601a      	str	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <i2c_ack_di>:

void i2c_ack_di(i2cx_regdef_t *p_i2cx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	p_i2cx->CR1 &= ~(1 << ACK_BIT_POSITION_CR1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <clear_addr_bit>:

void clear_addr_bit(i2cx_regdef_t *p_i2cx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = p_i2cx->SR1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	60fb      	str	r3, [r7, #12]
	temp = p_i2cx->SR2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	60fb      	str	r3, [r7, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <i2cx_en>:
{
	return p_i2cx->DR;
}

void i2cx_en(i2cx_regdef_t *p_i2cx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	p_i2cx->CR1 |= (1 << PERIPHERAL_EN_BIT_POSITION_CR1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <send_repeated_start>:
{
	p_i2cx->CR1 &= ~(1 << PERIPHERAL_EN_BIT_POSITION_CR1);
}

void send_repeated_start(i2cx_regdef_t *p_i2cx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	I2C2->CR1 |= (1 << START_CONDITION_BIT_POSITION_CR1);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <send_repeated_start+0x20>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <send_repeated_start+0x20>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]
	//while(!(I2C2->SR1 & I2C_SR1_SB)){;}
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40005800 	.word	0x40005800

08001d00 <I2C2_EV_IRQHandler>:
	while(!get_flag_status_sr1(p_i2cx,flag));
}


void I2C2_EV_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	uint32_t temp;
	if (I2C2->CR2 & (1 << 9))
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d057      	beq.n	8001dc2 <I2C2_EV_IRQHandler+0xc2>
	{
		if (get_flag_status_sr1(I2C2,FLAG_SB_SR1) == 1)
 8001d12:	2101      	movs	r1, #1
 8001d14:	4831      	ldr	r0, [pc, #196]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d16:	f7ff ff7d 	bl	8001c14 <get_flag_status_sr1>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d115      	bne.n	8001d4c <I2C2_EV_IRQHandler+0x4c>
		{
			temp = I2C2->SR1;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	607b      	str	r3, [r7, #4]
			if (flag_send_write_address)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <I2C2_EV_IRQHandler+0xe0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <I2C2_EV_IRQHandler+0x3a>
			{
				write_7_bit_device_address(I2C2,EEPROM_DEVICE_ADDRESS,WRITE);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	21a0      	movs	r1, #160	; 0xa0
 8001d32:	482a      	ldr	r0, [pc, #168]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d34:	f7ff ff48 	bl	8001bc8 <write_7_bit_device_address>
 8001d38:	e008      	b.n	8001d4c <I2C2_EV_IRQHandler+0x4c>
			}
			else if(!flag_send_write_address)
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <I2C2_EV_IRQHandler+0xe0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <I2C2_EV_IRQHandler+0x4c>
			{
				write_7_bit_device_address(I2C2,EEPROM_DEVICE_ADDRESS,READ);
 8001d42:	2201      	movs	r2, #1
 8001d44:	21a0      	movs	r1, #160	; 0xa0
 8001d46:	4825      	ldr	r0, [pc, #148]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d48:	f7ff ff3e 	bl	8001bc8 <write_7_bit_device_address>
			}

		}

		if (get_flag_status_sr1(I2C2,FLAG_ADDR_SR1) == 1)
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4823      	ldr	r0, [pc, #140]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d50:	f7ff ff60 	bl	8001c14 <get_flag_status_sr1>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d129      	bne.n	8001dae <I2C2_EV_IRQHandler+0xae>
		{
			if (flag_send_write_address)
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <I2C2_EV_IRQHandler+0xe0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <I2C2_EV_IRQHandler+0x8c>
			{
				clear_addr_bit(I2C2);
 8001d62:	481e      	ldr	r0, [pc, #120]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d64:	f7ff ff9c 	bl	8001ca0 <clear_addr_bit>
				flag_send_write_address = 0;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <I2C2_EV_IRQHandler+0xe0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
				if(flag_dma_based_read)
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <I2C2_EV_IRQHandler+0xe4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01b      	beq.n	8001dae <I2C2_EV_IRQHandler+0xae>
				{
					dma_counter_set(DMA1,CHANNEL_4,2);
 8001d76:	2202      	movs	r2, #2
 8001d78:	2104      	movs	r1, #4
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <I2C2_EV_IRQHandler+0xe8>)
 8001d7c:	f7ff fbf2 	bl	8001564 <dma_counter_set>
					dma_channel_en(DMA1,CHANNEL_4,1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2104      	movs	r1, #4
 8001d84:	4818      	ldr	r0, [pc, #96]	; (8001de8 <I2C2_EV_IRQHandler+0xe8>)
 8001d86:	f7ff fc05 	bl	8001594 <dma_channel_en>
 8001d8a:	e010      	b.n	8001dae <I2C2_EV_IRQHandler+0xae>
				}
			}
			else if (!flag_send_write_address)
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <I2C2_EV_IRQHandler+0xe0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10c      	bne.n	8001dae <I2C2_EV_IRQHandler+0xae>
			{
				clear_addr_bit(I2C2);
 8001d94:	4811      	ldr	r0, [pc, #68]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001d96:	f7ff ff83 	bl	8001ca0 <clear_addr_bit>
				if (!flag_read_multiple_byte)
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <I2C2_EV_IRQHandler+0xec>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <I2C2_EV_IRQHandler+0xae>
				{
					i2c_ack_di(I2C2);
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001da4:	f7ff ff6d 	bl	8001c82 <i2c_ack_di>
					send_stop(I2C2);
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001daa:	f7ff ff21 	bl	8001bf0 <send_stop>
				}
			}
		}

		if (get_flag_status_sr1(I2C2,FLAG_BTF_SR1) == 1)
 8001dae:	2104      	movs	r1, #4
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001db2:	f7ff ff2f 	bl	8001c14 <get_flag_status_sr1>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d102      	bne.n	8001dc2 <I2C2_EV_IRQHandler+0xc2>
		{
			send_stop(I2C2);
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001dbe:	f7ff ff17 	bl	8001bf0 <send_stop>
		}
	}

	if (I2C2->CR2 & (1 << 10))
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <I2C2_EV_IRQHandler+0xdc>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <I2C2_EV_IRQHandler+0xd2>
	{

		i2c2_buffer_interrupt_handling();
 8001dce:	f000 f80f 	bl	8001df0 <i2c2_buffer_interrupt_handling>
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40005800 	.word	0x40005800
 8001de0:	2000022c 	.word	0x2000022c
 8001de4:	20000230 	.word	0x20000230
 8001de8:	40020000 	.word	0x40020000
 8001dec:	2000022f 	.word	0x2000022f

08001df0 <i2c2_buffer_interrupt_handling>:




void i2c2_buffer_interrupt_handling(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static uint8_t j = 0;
	if (get_flag_status_sr2(I2C2,FLAG_TX_OR_RX) == 1)
 8001df4:	2104      	movs	r1, #4
 8001df6:	4860      	ldr	r0, [pc, #384]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001df8:	f7ff ff20 	bl	8001c3c <get_flag_status_sr2>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d137      	bne.n	8001e72 <i2c2_buffer_interrupt_handling+0x82>
	{
		if (get_flag_status_sr1(I2C2,FLAG_TXE_SR1) == 1)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	485c      	ldr	r0, [pc, #368]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001e06:	f7ff ff05 	bl	8001c14 <get_flag_status_sr1>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 80b0 	bne.w	8001f72 <i2c2_buffer_interrupt_handling+0x182>
		{
			if (flag_temp)
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <i2c2_buffer_interrupt_handling+0x18c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <i2c2_buffer_interrupt_handling+0x3c>
			{
				flag_temp = 0;
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <i2c2_buffer_interrupt_handling+0x18c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
				temp_transmit_len = transmit_len;
 8001e20:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <i2c2_buffer_interrupt_handling+0x190>)
 8001e22:	f993 3000 	ldrsb.w	r3, [r3]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <i2c2_buffer_interrupt_handling+0x194>)
 8001e2a:	701a      	strb	r2, [r3, #0]
			}

			if (transmit_len-- > 0)
 8001e2c:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <i2c2_buffer_interrupt_handling+0x190>)
 8001e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	3a01      	subs	r2, #1
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	b251      	sxtb	r1, r2
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <i2c2_buffer_interrupt_handling+0x190>)
 8001e3c:	7011      	strb	r1, [r2, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dd0b      	ble.n	8001e5a <i2c2_buffer_interrupt_handling+0x6a>
			{

				I2C2->DR = eeprom_buffer[i++];
 8001e42:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <i2c2_buffer_interrupt_handling+0x198>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	b2d1      	uxtb	r1, r2
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <i2c2_buffer_interrupt_handling+0x198>)
 8001e4c:	7011      	strb	r1, [r2, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <i2c2_buffer_interrupt_handling+0x19c>)
 8001e52:	5c9a      	ldrb	r2, [r3, r2]
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001e56:	611a      	str	r2, [r3, #16]
				}
			}
		}
	}

}
 8001e58:	e08b      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
				if (flag_interrupt_based_read)
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <i2c2_buffer_interrupt_handling+0x1a0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <i2c2_buffer_interrupt_handling+0x182>
					flag_interrupt_based_read = 0;
 8001e64:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <i2c2_buffer_interrupt_handling+0x1a0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
					send_repeated_start(I2C2);
 8001e6a:	4843      	ldr	r0, [pc, #268]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001e6c:	f7ff ff36 	bl	8001cdc <send_repeated_start>
}
 8001e70:	e07f      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
	else if (get_flag_status_sr2(I2C2,FLAG_TX_OR_RX) == 0)
 8001e72:	2104      	movs	r1, #4
 8001e74:	4840      	ldr	r0, [pc, #256]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001e76:	f7ff fee1 	bl	8001c3c <get_flag_status_sr2>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d178      	bne.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
		if (get_flag_status_sr1(I2C2,FLAG_RXNE_SR1) == 1)
 8001e80:	2140      	movs	r1, #64	; 0x40
 8001e82:	483d      	ldr	r0, [pc, #244]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001e84:	f7ff fec6 	bl	8001c14 <get_flag_status_sr1>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d171      	bne.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
			if (!flag_read_multiple_byte)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <i2c2_buffer_interrupt_handling+0x1a4>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11e      	bne.n	8001ed4 <i2c2_buffer_interrupt_handling+0xe4>
				if (receive_len-- > 0)
 8001e96:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001e98:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	b251      	sxtb	r1, r2
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001ea6:	7011      	strb	r1, [r2, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dd0c      	ble.n	8001ec6 <i2c2_buffer_interrupt_handling+0xd6>
					rx_i2c_buffer[j++] = I2C2->DR;
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	b2d0      	uxtb	r0, r2
 8001eb8:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001eba:	7010      	strb	r0, [r2, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	b2c9      	uxtb	r1, r1
 8001ec0:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <i2c2_buffer_interrupt_handling+0x1b0>)
 8001ec2:	5499      	strb	r1, [r3, r2]
}
 8001ec4:	e055      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
					I2C2->CR2 &= ~(1 << IT_BUF_EN_BIT_POSTITION_CR2);
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a2b      	ldr	r2, [pc, #172]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ed0:	6053      	str	r3, [r2, #4]
}
 8001ed2:	e04e      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
			else if(flag_read_multiple_byte)
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <i2c2_buffer_interrupt_handling+0x1a4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d04a      	beq.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
				if (receive_len > 2)
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001ede:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	dd15      	ble.n	8001f12 <i2c2_buffer_interrupt_handling+0x122>
					rx_i2c_buffer[j++] = I2C2->DR;
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	b2d0      	uxtb	r0, r2
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001ef4:	7010      	strb	r0, [r2, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	b2c9      	uxtb	r1, r1
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <i2c2_buffer_interrupt_handling+0x1b0>)
 8001efc:	5499      	strb	r1, [r3, r2]
					receive_len -= 1;
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001f00:	f993 3000 	ldrsb.w	r3, [r3]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	b25a      	sxtb	r2, r3
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001f0e:	701a      	strb	r2, [r3, #0]
}
 8001f10:	e02f      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
					if (receive_len == 2)
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001f14:	f993 3000 	ldrsb.w	r3, [r3]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <i2c2_buffer_interrupt_handling+0x164>
						rx_i2c_buffer[j++] = I2C2->DR;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	b2d0      	uxtb	r0, r2
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001f2a:	7010      	strb	r0, [r2, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	b2c9      	uxtb	r1, r1
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <i2c2_buffer_interrupt_handling+0x1b0>)
 8001f32:	5499      	strb	r1, [r3, r2]
						i2c_ack_di(I2C2);
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001f36:	f7ff fea4 	bl	8001c82 <i2c_ack_di>
						send_stop(I2C2);
 8001f3a:	480f      	ldr	r0, [pc, #60]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001f3c:	f7ff fe58 	bl	8001bf0 <send_stop>
						receive_len -= 1;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001f42:	f993 3000 	ldrsb.w	r3, [r3]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	b25a      	sxtb	r2, r3
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <i2c2_buffer_interrupt_handling+0x1a8>)
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	e00e      	b.n	8001f72 <i2c2_buffer_interrupt_handling+0x182>
						rx_i2c_buffer[j++] = I2C2->DR;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <i2c2_buffer_interrupt_handling+0x188>)
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	b2d0      	uxtb	r0, r2
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <i2c2_buffer_interrupt_handling+0x1ac>)
 8001f62:	7010      	strb	r0, [r2, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	b2c9      	uxtb	r1, r1
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <i2c2_buffer_interrupt_handling+0x1b0>)
 8001f6a:	5499      	strb	r1, [r3, r2]
						flag_read_multiple_byte = 0;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <i2c2_buffer_interrupt_handling+0x1a4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	2000022e 	.word	0x2000022e
 8001f80:	20000224 	.word	0x20000224
 8001f84:	20000231 	.word	0x20000231
 8001f88:	20000232 	.word	0x20000232
 8001f8c:	200001e4 	.word	0x200001e4
 8001f90:	2000022d 	.word	0x2000022d
 8001f94:	2000022f 	.word	0x2000022f
 8001f98:	2000022b 	.word	0x2000022b
 8001f9c:	20000233 	.word	0x20000233
 8001fa0:	20000228 	.word	0x20000228

08001fa4 <i2cx_reset>:

void i2cx_reset(i2cx_regdef_t *p_i2cx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	p_i2cx->CR1 |= (1 << I2CX_SOFTWARE_RESET_BIT_POSITION_CR1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
	while(p_i2cx->SR2 & (1<< 1)); // waite for busy flag to reset
 8001fb8:	bf00      	nop
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <i2cx_reset+0x16>
	p_i2cx->CR1 &= ~(1 << I2CX_SOFTWARE_RESET_BIT_POSITION_CR1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <nvic_en_irq>:
 */

#include "System.h"

void nvic_en_irq(irqn_type irqn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t register_position = irqn / 32;
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	73fb      	strb	r3, [r7, #15]
	uint8_t irq_position = irqn % 32;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[register_position] = (1 << irq_position);
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	fa02 f103 	lsl.w	r1, r2, r3
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <nvic_en_irq+0x34>)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <timer_channel_init>:
		[TIMER_CHANNEL_1] = {TIMER_CHANNEL_1,0,UP_COUNTING,CENTER_ALIGNED_MODE_3,8000,10,CC_X_AS_OUTPUT,PWM_MODE_1,CC_X_ACTIVE_HIGH,NOT_APPLICABLE,NOT_APPLICABLE,DISABLE,TIM_DIER_CC1I_EN,DISABLE,TIM_DIER_CC1DE_EN,CAPTURE_COMPARE_1_OUTPUT_EN},
		[TIMER_CHANNEL_2] = {TIMER_CHANNEL_2,0,UP_COUNTING,EDGE_ALIGNED_MODE,8000,10,CC_X_AS_INPUT_IC_X_TO_TI_X,NOT_APPLICABLE,IC_X_RISING,NO_PRESCALER,SAMPLING_FCK_INT_N_8,ENABLE,TIM_DIER_CC2I_EN,DISABLE,TIM_DIER_CC1DE_EN,CAPTURE_COMPARE_2_OUTPUT_EN},
};

void timer_channel_init(timerx_regdef_t *p_timerx,uint8_t channel)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;

	//Center aligned mode selection
	p_timerx->CR1 &= ~(MASK_FOR_CLEAR_2_BIT << CMS_BIT_POSTION_CR1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 0260 	bic.w	r2, r3, #96	; 0x60
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
	p_timerx->CR1 |= timer1_channel_x_config[channel].center_aligned_mode << CMS_BIT_POSTION_CR1;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	490e      	ldr	r1, [pc, #56]	; (800206c <timer_channel_init+0x58>)
 8002034:	2016      	movs	r0, #22
 8002036:	fb00 f202 	mul.w	r2, r0, r2
 800203a:	440a      	add	r2, r1
 800203c:	3203      	adds	r2, #3
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	0152      	lsls	r2, r2, #5
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]

	//Counting  Direction
	if (timer1_channel_x_config[channel].dir == UP_COUNTING)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <timer_channel_init+0x58>)
 800204c:	2116      	movs	r1, #22
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3302      	adds	r3, #2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <timer_channel_init+0x5c>
		p_timerx->CR1 &= ~(1 << COUNTING_DIR_BIT_POSITION_CR1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0210 	bic.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e008      	b.n	800207c <timer_channel_init+0x68>
 800206a:	bf00      	nop
 800206c:	20000164 	.word	0x20000164
	else
		p_timerx->CR1 |= (1 << COUNTING_DIR_BIT_POSITION_CR1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f043 0210 	orr.w	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]

	//Pre-scalar
	p_timerx->PSC = timer1_channel_x_config[channel].prescalar;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	4ab6      	ldr	r2, [pc, #728]	; (8002358 <timer_channel_init+0x344>)
 8002080:	2116      	movs	r1, #22
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28

	p_timerx->ARR = timer1_channel_x_config[channel].auto_reload_reg_value;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	4ab0      	ldr	r2, [pc, #704]	; (8002358 <timer_channel_init+0x344>)
 8002096:	2116      	movs	r1, #22
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3306      	adds	r3, #6
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

	// CC_X configuration as output or input
	temp = timer1_channel_x_config[channel].timer_x_channel_number % 2;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	4aab      	ldr	r2, [pc, #684]	; (8002358 <timer_channel_init+0x344>)
 80020ac:	2116      	movs	r1, #22
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
	p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] &= ~(MASK_FOR_CLEAR_2_BIT << (8 * temp));
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	4aa6      	ldr	r2, [pc, #664]	; (8002358 <timer_channel_init+0x344>)
 80020c0:	2116      	movs	r1, #22
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	b2d8      	uxtb	r0, r3
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3206      	adds	r2, #6
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	00d2      	lsls	r2, r2, #3
 80020dc:	2103      	movs	r1, #3
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	43d2      	mvns	r2, r2
 80020e4:	4611      	mov	r1, r2
 80020e6:	4602      	mov	r2, r0
 80020e8:	4019      	ands	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3206      	adds	r2, #6
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] |= (timer1_channel_x_config[channel].capture_compare_selection << (8 * temp));
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	4a98      	ldr	r2, [pc, #608]	; (8002358 <timer_channel_init+0x344>)
 80020f6:	2116      	movs	r1, #22
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	b2dc      	uxtb	r4, r3
 8002104:	4622      	mov	r2, r4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3206      	adds	r2, #6
 800210a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	4991      	ldr	r1, [pc, #580]	; (8002358 <timer_channel_init+0x344>)
 8002112:	2016      	movs	r0, #22
 8002114:	fb00 f202 	mul.w	r2, r0, r2
 8002118:	440a      	add	r2, r1
 800211a:	3208      	adds	r2, #8
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4611      	mov	r1, r2
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	00d2      	lsls	r2, r2, #3
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4611      	mov	r1, r2
 800212a:	4622      	mov	r2, r4
 800212c:	4319      	orrs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3206      	adds	r2, #6
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//output compare mode
	if (timer1_channel_x_config[channel].capture_compare_selection == CC_X_AS_OUTPUT)
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	4a87      	ldr	r2, [pc, #540]	; (8002358 <timer_channel_init+0x344>)
 800213a:	2116      	movs	r1, #22
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3308      	adds	r3, #8
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d14e      	bne.n	80021e8 <timer_channel_init+0x1d4>
	{
		temp = timer1_channel_x_config[channel].timer_x_channel_number % 2;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	4a82      	ldr	r2, [pc, #520]	; (8002358 <timer_channel_init+0x344>)
 800214e:	2116      	movs	r1, #22
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] &= ~(MASK_FOR_CLEAR_3_BIT << ((8 * temp) + 4));
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	4a7d      	ldr	r2, [pc, #500]	; (8002358 <timer_channel_init+0x344>)
 8002162:	2116      	movs	r1, #22
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	b2d8      	uxtb	r0, r3
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3206      	adds	r2, #6
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	3204      	adds	r2, #4
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	43d2      	mvns	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4602      	mov	r2, r0
 800218c:	4019      	ands	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3206      	adds	r2, #6
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] |= (timer1_channel_x_config[channel].output_compare_mode << ((8 * temp) + 4));
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	4a6f      	ldr	r2, [pc, #444]	; (8002358 <timer_channel_init+0x344>)
 800219a:	2116      	movs	r1, #22
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	b2dc      	uxtb	r4, r3
 80021a8:	4622      	mov	r2, r4
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3206      	adds	r2, #6
 80021ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4968      	ldr	r1, [pc, #416]	; (8002358 <timer_channel_init+0x344>)
 80021b6:	2016      	movs	r0, #22
 80021b8:	fb00 f202 	mul.w	r2, r0, r2
 80021bc:	440a      	add	r2, r1
 80021be:	3209      	adds	r2, #9
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4611      	mov	r1, r2
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	00d2      	lsls	r2, r2, #3
 80021c8:	3204      	adds	r2, #4
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4622      	mov	r2, r4
 80021d2:	4319      	orrs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3206      	adds	r2, #6
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_timerx->BDTR |= (1 << MAIN_OUTPUT_EN_BIT_POSITION_BDTR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	if (timer1_channel_x_config[channel].capture_compare_selection != CC_X_AS_OUTPUT)
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	4a5b      	ldr	r2, [pc, #364]	; (8002358 <timer_channel_init+0x344>)
 80021ec:	2116      	movs	r1, #22
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3308      	adds	r3, #8
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8092 	beq.w	8002322 <timer_channel_init+0x30e>
	{
		// input capture prescaler
		temp = timer1_channel_x_config[channel].timer_x_channel_number % 2;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	4a55      	ldr	r2, [pc, #340]	; (8002358 <timer_channel_init+0x344>)
 8002202:	2116      	movs	r1, #22
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] &= ~(MASK_FOR_CLEAR_2_BIT << ((8 * temp) + 2));
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <timer_channel_init+0x344>)
 8002216:	2116      	movs	r1, #22
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	b2d8      	uxtb	r0, r3
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3206      	adds	r2, #6
 800222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	00d2      	lsls	r2, r2, #3
 8002232:	3202      	adds	r2, #2
 8002234:	2103      	movs	r1, #3
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	43d2      	mvns	r2, r2
 800223c:	4611      	mov	r1, r2
 800223e:	4602      	mov	r2, r0
 8002240:	4019      	ands	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3206      	adds	r2, #6
 8002246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] |= (timer1_channel_x_config[channel].input_capture_prescaler << ((8 * temp) + 2));
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	4a42      	ldr	r2, [pc, #264]	; (8002358 <timer_channel_init+0x344>)
 800224e:	2116      	movs	r1, #22
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	b2dc      	uxtb	r4, r3
 800225c:	4622      	mov	r2, r4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3206      	adds	r2, #6
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	493b      	ldr	r1, [pc, #236]	; (8002358 <timer_channel_init+0x344>)
 800226a:	2016      	movs	r0, #22
 800226c:	fb00 f202 	mul.w	r2, r0, r2
 8002270:	440a      	add	r2, r1
 8002272:	320b      	adds	r2, #11
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	4611      	mov	r1, r2
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	00d2      	lsls	r2, r2, #3
 800227c:	3202      	adds	r2, #2
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4611      	mov	r1, r2
 8002284:	4622      	mov	r2, r4
 8002286:	4319      	orrs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3206      	adds	r2, #6
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//input capture filter
		temp = timer1_channel_x_config[channel].timer_x_channel_number % 2;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	4a31      	ldr	r2, [pc, #196]	; (8002358 <timer_channel_init+0x344>)
 8002294:	2116      	movs	r1, #22
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] &= ~(MASK_FOR_CLEAR_4_BIT << ((8 * temp) + 4));
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <timer_channel_init+0x344>)
 80022a8:	2116      	movs	r1, #22
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	4602      	mov	r2, r0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3206      	adds	r2, #6
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	00d2      	lsls	r2, r2, #3
 80022c4:	3204      	adds	r2, #4
 80022c6:	210f      	movs	r1, #15
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	43d2      	mvns	r2, r2
 80022ce:	4611      	mov	r1, r2
 80022d0:	4602      	mov	r2, r0
 80022d2:	4019      	ands	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3206      	adds	r2, #6
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_timerx->CCMR[timer1_channel_x_config[channel].timer_x_channel_number / 2] |= (timer1_channel_x_config[channel].input_capture_filter << ((8 * temp) + 4));
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <timer_channel_init+0x344>)
 80022e0:	2116      	movs	r1, #22
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	b2dc      	uxtb	r4, r3
 80022ee:	4622      	mov	r2, r4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3206      	adds	r2, #6
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	4917      	ldr	r1, [pc, #92]	; (8002358 <timer_channel_init+0x344>)
 80022fc:	2016      	movs	r0, #22
 80022fe:	fb00 f202 	mul.w	r2, r0, r2
 8002302:	440a      	add	r2, r1
 8002304:	320c      	adds	r2, #12
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	4611      	mov	r1, r2
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	00d2      	lsls	r2, r2, #3
 800230e:	3204      	adds	r2, #4
 8002310:	fa01 f202 	lsl.w	r2, r1, r2
 8002314:	4611      	mov	r1, r2
 8002316:	4622      	mov	r2, r4
 8002318:	4319      	orrs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3206      	adds	r2, #6
 800231e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


	//
	//interrupt en or di
	if (timer1_channel_x_config[channel].interrupt_en_or_di == ENABLE)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <timer_channel_init+0x344>)
 8002326:	2116      	movs	r1, #22
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	330d      	adds	r3, #13
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d112      	bne.n	800235c <timer_channel_init+0x348>
	{
		p_timerx->DIER |= timer1_channel_x_config[channel].channel_interrupt_en_or_di;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	4906      	ldr	r1, [pc, #24]	; (8002358 <timer_channel_init+0x344>)
 800233e:	2016      	movs	r0, #22
 8002340:	fb00 f202 	mul.w	r2, r0, r2
 8002344:	440a      	add	r2, r1
 8002346:	320e      	adds	r2, #14
 8002348:	8812      	ldrh	r2, [r2, #0]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
		nvic_en_irq(TIM1_CC_IRQn);
 8002350:	201b      	movs	r0, #27
 8002352:	f7ff fe43 	bl	8001fdc <nvic_en_irq>
 8002356:	e00f      	b.n	8002378 <timer_channel_init+0x364>
 8002358:	20000164 	.word	0x20000164
	}
	else
	{
		p_timerx->DIER &= ~timer1_channel_x_config[channel].channel_interrupt_en_or_di;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	4928      	ldr	r1, [pc, #160]	; (8002404 <timer_channel_init+0x3f0>)
 8002364:	2016      	movs	r0, #22
 8002366:	fb00 f202 	mul.w	r2, r0, r2
 800236a:	440a      	add	r2, r1
 800236c:	320e      	adds	r2, #14
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	43d2      	mvns	r2, r2
 8002372:	401a      	ands	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
	}
	//dma en or di
	if (timer1_channel_x_config[channel].dma_en_or_di == ENABLE)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	4a22      	ldr	r2, [pc, #136]	; (8002404 <timer_channel_init+0x3f0>)
 800237c:	2116      	movs	r1, #22
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3310      	adds	r3, #16
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10d      	bne.n	80023a8 <timer_channel_init+0x394>
		p_timerx->DIER |= timer1_channel_x_config[channel].channel_dma_en_or_di;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	491c      	ldr	r1, [pc, #112]	; (8002404 <timer_channel_init+0x3f0>)
 8002394:	2016      	movs	r0, #22
 8002396:	fb00 f202 	mul.w	r2, r0, r2
 800239a:	440a      	add	r2, r1
 800239c:	3212      	adds	r2, #18
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	e00d      	b.n	80023c4 <timer_channel_init+0x3b0>
	else
		p_timerx->DIER &= ~timer1_channel_x_config[channel].channel_dma_en_or_di;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	4915      	ldr	r1, [pc, #84]	; (8002404 <timer_channel_init+0x3f0>)
 80023b0:	2016      	movs	r0, #22
 80023b2:	fb00 f202 	mul.w	r2, r0, r2
 80023b6:	440a      	add	r2, r1
 80023b8:	3212      	adds	r2, #18
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	43d2      	mvns	r2, r2
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]

	//timer channel active high polarity
	p_timerx->CCER &= ~(timer1_channel_x_config[channel].polarity << OC_1_POLARITY_BIT_POSITION_CCER);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <timer_channel_init+0x3f0>)
 80023cc:	2016      	movs	r0, #22
 80023ce:	fb00 f202 	mul.w	r2, r0, r2
 80023d2:	440a      	add	r2, r1
 80023d4:	320a      	adds	r2, #10
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	0052      	lsls	r2, r2, #1
 80023da:	43d2      	mvns	r2, r2
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	621a      	str	r2, [r3, #32]

	//timer channel EN
	p_timerx->CCER |= timer1_channel_x_config[channel].channel_to_enable;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	4906      	ldr	r1, [pc, #24]	; (8002404 <timer_channel_init+0x3f0>)
 80023ea:	2016      	movs	r0, #22
 80023ec:	fb00 f202 	mul.w	r2, r0, r2
 80023f0:	440a      	add	r2, r1
 80023f2:	3214      	adds	r2, #20
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	621a      	str	r2, [r3, #32]

}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	20000164 	.word	0x20000164

08002408 <get_timer_flag_status>:
{
	p_timerx->CR1 &= (1 << COUNTER_EN_BIT_POSTION_CR1);
}

uint8_t get_timer_flag_status(timerx_regdef_t *p_timerx, uint8_t flag)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
	if (p_timerx->SR & flag)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <get_timer_flag_status+0x1c>
		return 1;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <get_timer_flag_status+0x1e>
	else
		return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	if (get_timer_flag_status(TIMER1,TIM_DIER_CC2I_EN))
 8002434:	2104      	movs	r1, #4
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <TIM1_CC_IRQHandler+0x34>)
 8002438:	f7ff ffe6 	bl	8002408 <get_timer_flag_status>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <TIM1_CC_IRQHandler+0x2e>
	{
		// clear the interrupt
		TIMER1->SR &= ~(1 << 2);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <TIM1_CC_IRQHandler+0x34>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <TIM1_CC_IRQHandler+0x34>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6113      	str	r3, [r2, #16]
		// read CCR
		capture_value = TIMER1->CCR[1];
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <TIM1_CC_IRQHandler+0x34>)
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <TIM1_CC_IRQHandler+0x38>)
 8002456:	801a      	strh	r2, [r3, #0]
		flag_send_data = 1;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <TIM1_CC_IRQHandler+0x3c>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
		// set flag to print
	}
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40012c00 	.word	0x40012c00
 8002468:	20000234 	.word	0x20000234
 800246c:	20000236 	.word	0x20000236

08002470 <uart_x_configure_parameter>:
uint16_t logic_counter3 = 0;
uint16_t logic_counter4 = 0;
uint16_t logic_counter5 = 0;

void uart_x_configure_parameter(usart_handle *p_usart_handle)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	p_usart_handle->add_of_usartx = USART2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <uart_x_configure_parameter+0x44>)
 800247c:	601a      	str	r2, [r3, #0]
	//USART2Handle.Usart_Configuration.Mode = USART_MODE_TXRX;
	p_usart_handle->usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	715a      	strb	r2, [r3, #5]
	p_usart_handle->usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	711a      	strb	r2, [r3, #4]
	p_usart_handle->usart_configuration.baudrate = USART_STD_BAUD_9600;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002490:	609a      	str	r2, [r3, #8]
	p_usart_handle->usart_configuration.parity_control = USART_PARITY_DISABLE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	p_usart_handle->tx_buffer = &(tx_buffer_data[0]);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <uart_x_configure_parameter+0x48>)
 800249c:	615a      	str	r2, [r3, #20]
	p_usart_handle->rx_buffer = &(rx_buffer_data[0]);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <uart_x_configure_parameter+0x4c>)
 80024a2:	619a      	str	r2, [r3, #24]
	p_usart_handle->rx_len = 8;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2208      	movs	r2, #8
 80024a8:	775a      	strb	r2, [r3, #29]

}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40004400 	.word	0x40004400
 80024b8:	20000238 	.word	0x20000238
 80024bc:	20000288 	.word	0x20000288

080024c0 <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	795b      	ldrb	r3, [r3, #5]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f000 f8a9 	bl	800262a <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 f8b9 	bl	800265a <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 f8c2 	bl	800267e <config_parity>

	//config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 f81f 	bl	8002548 <usart_set_baudrate>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_transmitter_en);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7c1b      	ldrb	r3, [r3, #16]
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f000 fa07 	bl	8002928 <usart_dma_mode_en_di>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_receiver_en);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7c5b      	ldrb	r3, [r3, #17]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f000 f9ff 	bl	8002928 <usart_dma_mode_en_di>

	usart_en(p_usart_handle->add_of_usartx);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f86c 	bl	800260c <usart_en>

	//usart_read_interrupt(p_usart_handle->add_of_usartx);

	usart_rx_en(p_usart_handle->add_of_usartx);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f9e5 	bl	8002908 <usart_rx_en>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 8002552:	2001      	movs	r0, #1
 8002554:	f7fe fdf6 	bl	8001144 <apb_get_clock>
 8002558:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7fd fffe 	bl	800055c <__aeabi_ui2d>
 8002560:	4604      	mov	r4, r0
 8002562:	460d      	mov	r5, r1
 8002564:	6838      	ldr	r0, [r7, #0]
 8002566:	f7fd fff9 	bl	800055c <__aeabi_ui2d>
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <usart_set_baudrate+0xc0>)
 8002570:	f7fe f86e 	bl	8000650 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fe f992 	bl	80008a4 <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fa74 	bl	8000a74 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 8002590:	6938      	ldr	r0, [r7, #16]
 8002592:	f7fe fc43 	bl	8000e1c <__aeabi_f2iz>
 8002596:	4603      	mov	r3, r0
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fb75 	bl	8000c88 <__aeabi_i2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	4619      	mov	r1, r3
 80025a2:	6938      	ldr	r0, [r7, #16]
 80025a4:	f7fe faba 	bl	8000b1c <__aeabi_fsub>
 80025a8:	4603      	mov	r3, r0
 80025aa:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	6938      	ldr	r0, [r7, #16]
 80025b0:	f7fe fab4 	bl	8000b1c <__aeabi_fsub>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fc56 	bl	8000e68 <__aeabi_f2uiz>
 80025bc:	4603      	mov	r3, r0
 80025be:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 80025c0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7fd fdd3 	bl	8000170 <__aeabi_fmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa23 	bl	8002a18 <round_off>
 80025d2:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d904      	bls.n	80025e4 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]
}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bdb0      	pop	{r4, r5, r7, pc}
 8002606:	bf00      	nop
 8002608:	40300000 	.word	0x40300000

0800260c <usart_en>:
		}
	}
}

void usart_en(usartx_regdef_t* p_usartx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	0312      	lsls	r2, r2, #12
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	611a      	str	r2, [r3, #16]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	0312      	lsls	r2, r2, #12
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 800269c:	e008      	b.n	80026b0 <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d105      	bne.n	80026b0 <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <get_flag_status>:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
	if (p_usartx->SR & flag)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <get_flag_status+0x1c>
	{
		return 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 80026d6:	2300      	movs	r3, #0
	}
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <usart_interrupt_handling>:

}


void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffe1 	bl	80026ba <get_flag_status>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d128      	bne.n	8002750 <usart_interrupt_handling+0x6c>
	{
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	4b7c      	ldr	r3, [pc, #496]	; (80028f4 <usart_interrupt_handling+0x210>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	b2c8      	uxtb	r0, r1
 800270a:	497a      	ldr	r1, [pc, #488]	; (80028f4 <usart_interrupt_handling+0x210>)
 800270c:	7008      	strb	r0, [r1, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	4b79      	ldr	r3, [pc, #484]	; (80028f8 <usart_interrupt_handling+0x214>)
 8002714:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d117      	bne.n	8002750 <usart_interrupt_handling+0x6c>
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800272e:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273e:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0208 	bic.w	r2, r2, #8
 800274e:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ffaf 	bl	80026ba <get_flag_status>
 800275c:	4603      	mov	r3, r0
 800275e:	2b01      	cmp	r3, #1
 8002760:	d158      	bne.n	8002814 <usart_interrupt_handling+0x130>
	{
		txe_counter++;
 8002762:	4b66      	ldr	r3, [pc, #408]	; (80028fc <usart_interrupt_handling+0x218>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b64      	ldr	r3, [pc, #400]	; (80028fc <usart_interrupt_handling+0x218>)
 800276c:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <usart_interrupt_handling+0x21c>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	b2c8      	uxtb	r0, r1
 800277a:	4961      	ldr	r1, [pc, #388]	; (8002900 <usart_interrupt_handling+0x21c>)
 800277c:	7008      	strb	r0, [r1, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <usart_interrupt_handling+0x220>)
 8002784:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d039      	beq.n	8002804 <usart_interrupt_handling+0x120>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	791b      	ldrb	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d125      	bne.n	80027e4 <usart_interrupt_handling+0x100>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d115      	bne.n	80027cc <usart_interrupt_handling+0xe8>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b4:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	e023      	b.n	8002814 <usart_interrupt_handling+0x130>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	615a      	str	r2, [r3, #20]
 80027e2:	e017      	b.n	8002814 <usart_interrupt_handling+0x130>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	791b      	ldrb	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d113      	bne.n	8002814 <usart_interrupt_handling+0x130>
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	e007      	b.n	8002814 <usart_interrupt_handling+0x130>
			}
		}
		else
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002812:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2120      	movs	r1, #32
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff4d 	bl	80026ba <get_flag_status>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d161      	bne.n	80028ea <usart_interrupt_handling+0x206>
	{
		if (p_usart_handle->rx_len > 0)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7f5b      	ldrb	r3, [r3, #29]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d051      	beq.n	80028d2 <usart_interrupt_handling+0x1ee>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	791b      	ldrb	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d125      	bne.n	8002882 <usart_interrupt_handling+0x19e>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d114      	bne.n	8002868 <usart_interrupt_handling+0x184>
				{
					//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
					*((uint16_t*)(p_usart_handle->rx_buffer)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284e:	b292      	uxth	r2, r2
 8002850:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
		else if (p_usart_handle->rx_len == 0)
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
		}
	}
}
 8002866:	e040      	b.n	80028ea <usart_interrupt_handling+0x206>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
}
 8002880:	e033      	b.n	80028ea <usart_interrupt_handling+0x206>
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	791b      	ldrb	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d12f      	bne.n	80028ea <usart_interrupt_handling+0x206>
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d112      	bne.n	80028b8 <usart_interrupt_handling+0x1d4>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_len--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7f5b      	ldrb	r3, [r3, #29]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	775a      	strb	r2, [r3, #29]
}
 80028b6:	e018      	b.n	80028ea <usart_interrupt_handling+0x206>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
}
 80028d0:	e00b      	b.n	80028ea <usart_interrupt_handling+0x206>
		else if (p_usart_handle->rx_len == 0)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7f5b      	ldrb	r3, [r3, #29]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <usart_interrupt_handling+0x206>
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0220 	bic.w	r2, r2, #32
 80028e8:	60da      	str	r2, [r3, #12]
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000328 	.word	0x20000328
 80028f8:	200002d8 	.word	0x200002d8
 80028fc:	200003a0 	.word	0x200003a0
 8002900:	2000037c 	.word	0x2000037c
 8002904:	2000032c 	.word	0x2000032c

08002908 <usart_rx_en>:
{
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
}

void usart_rx_en(usartx_regdef_t *p_usartx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
	...

08002928 <usart_dma_mode_en_di>:
{
	p_usartx->CR1 &= ~(1 << USART_CR1_RX_EN);
}

void usart_dma_mode_en_di(usartx_regdef_t *p_usartx,uint8_t en_di)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
	switch(en_di){
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d826      	bhi.n	8002988 <usart_dma_mode_en_di+0x60>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <usart_dma_mode_en_di+0x18>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002951 	.word	0x08002951
 8002944:	0800295f 	.word	0x0800295f
 8002948:	0800296d 	.word	0x0800296d
 800294c:	0800297b 	.word	0x0800297b
	case USARTx_DMA_TRANSMITTER_EN:
		p_usartx->CR3 |= USARTx_DMA_TRANSMITTER_EN_POS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	615a      	str	r2, [r3, #20]
		break;
 800295c:	e014      	b.n	8002988 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_TRANSMITTER_DI:
		p_usartx->CR3 &= USARTx_DMA_TRANSMITTER_DI_POS;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	615a      	str	r2, [r3, #20]
		break;
 800296a:	e00d      	b.n	8002988 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_EN:
		p_usartx->CR3 |= USARTx_DMA_RECEIVER_EN_POS;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	615a      	str	r2, [r3, #20]
		break;
 8002978:	e006      	b.n	8002988 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_DI:
		p_usartx->CR3 &= USARTx_DMA_RECEIVER_DI_POS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	615a      	str	r2, [r3, #20]
		break;
 8002986:	bf00      	nop
	}
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <USART2_IRQHandler>:
	dma_channel_en(DMA1,7,1);


}
void USART2_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	usart_interrupt_handling(&usart_2_handle);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <USART2_IRQHandler+0x10>)
 800299a:	f7ff fea3 	bl	80026e4 <usart_interrupt_handling>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000380 	.word	0x20000380

080029a8 <mcu_init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void mcu_init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	clock_init();
 80029ac:	f7fe fa7c 	bl	8000ea8 <clock_init>
	io_init();
 80029b0:	f7fe ff0a 	bl	80017c8 <io_init>
	i2cx_init(I2C2,I2C2_CHANNEL);
 80029b4:	2101      	movs	r1, #1
 80029b6:	4813      	ldr	r0, [pc, #76]	; (8002a04 <mcu_init+0x5c>)
 80029b8:	f7ff f800 	bl	80019bc <i2cx_init>
	uart_x_configure_parameter(&usart_2_handle);
 80029bc:	4812      	ldr	r0, [pc, #72]	; (8002a08 <mcu_init+0x60>)
 80029be:	f7ff fd57 	bl	8002470 <uart_x_configure_parameter>
	usart_init(&usart_2_handle);
 80029c2:	4811      	ldr	r0, [pc, #68]	; (8002a08 <mcu_init+0x60>)
 80029c4:	f7ff fd7c 	bl	80024c0 <usart_init>
	spi_init(SPI1,SPI_1);
 80029c8:	2100      	movs	r1, #0
 80029ca:	4810      	ldr	r0, [pc, #64]	; (8002a0c <mcu_init+0x64>)
 80029cc:	f000 f858 	bl	8002a80 <spi_init>
	timer_channel_init(TIMER1,TIMER_CHANNEL_1);
 80029d0:	2100      	movs	r1, #0
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <mcu_init+0x68>)
 80029d4:	f7ff fb1e 	bl	8002014 <timer_channel_init>
	timer_channel_init(TIMER1,TIMER_CHANNEL_2);
 80029d8:	2101      	movs	r1, #1
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <mcu_init+0x68>)
 80029dc:	f7ff fb1a 	bl	8002014 <timer_channel_init>
	dmax_channel_init(DMA1,CHANNEL_4);
 80029e0:	2104      	movs	r1, #4
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <mcu_init+0x6c>)
 80029e4:	f7fe fc80 	bl	80012e8 <dmax_channel_init>
	dmax_channel_init(DMA1,CHANNEL_5);
 80029e8:	2105      	movs	r1, #5
 80029ea:	480a      	ldr	r0, [pc, #40]	; (8002a14 <mcu_init+0x6c>)
 80029ec:	f7fe fc7c 	bl	80012e8 <dmax_channel_init>
	dmax_channel_init(DMA1,CHANNEL_7);
 80029f0:	2107      	movs	r1, #7
 80029f2:	4808      	ldr	r0, [pc, #32]	; (8002a14 <mcu_init+0x6c>)
 80029f4:	f7fe fc78 	bl	80012e8 <dmax_channel_init>
	dmax_channel_init(DMA1,CHANNEL_6);
 80029f8:	2106      	movs	r1, #6
 80029fa:	4806      	ldr	r0, [pc, #24]	; (8002a14 <mcu_init+0x6c>)
 80029fc:	f7fe fc74 	bl	80012e8 <dmax_channel_init>

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40005800 	.word	0x40005800
 8002a08:	20000380 	.word	0x20000380
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40020000 	.word	0x40020000

08002a18 <round_off>:

uint32_t round_off(float number)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe f9fb 	bl	8000e1c <__aeabi_f2iz>
 8002a26:	4603      	mov	r3, r0
 8002a28:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f9f6 	bl	8000e1c <__aeabi_f2iz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f928 	bl	8000c88 <__aeabi_i2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe f86d 	bl	8000b1c <__aeabi_fsub>
 8002a42:	4603      	mov	r3, r0
 8002a44:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 8002a46:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7fe f9be 	bl	8000dcc <__aeabi_fcmplt>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <round_off+0x44>
	{
		carry = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
 8002a5a:	e009      	b.n	8002a70 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 8002a5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7fe f9c7 	bl	8000df4 <__aeabi_fcmpge>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <round_off+0x58>
	{
		carry = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 8002a70:	7dfa      	ldrb	r2, [r7, #23]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <spi_init>:
		[SPI_2] = {BIDIMODE_DI,SOFTWARE_SLAVE_MANAGEMENT_EN,ERROR_INTERRUPT_DI,TXE_INTERRUPT_DI,RXNE_INTERRUPT_DI,TX_DMA_DI,RX_DMA_DI,FPCLK_DIV_2,CK_TO_ZERO_WHEN_IDLE,FIRST_CLK_TRANSITION_FOR_DATA_CAPTURE,MASTER_CONFIGURATION,MSB_TRANSMITTED_FIRST,EIGHT_BIT_DATA_FORMAT,FULL_DUPLEX},
		[SPI_3] = {BIDIMODE_DI,SOFTWARE_SLAVE_MANAGEMENT_EN,ERROR_INTERRUPT_DI,TXE_INTERRUPT_DI,RXNE_INTERRUPT_DI,TX_DMA_DI,RX_DMA_DI,FPCLK_DIV_2,CK_TO_ZERO_WHEN_IDLE,FIRST_CLK_TRANSITION_FOR_DATA_CAPTURE,MASTER_CONFIGURATION,MSB_TRANSMITTED_FIRST,EIGHT_BIT_DATA_FORMAT,FULL_DUPLEX},
};

void spi_init(spix_regdef_t *p_spix,uint8_t channel)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	70fb      	strb	r3, [r7, #3]
	// BI_Directional En or Di
	if (spi_x[channel].bi_di_mode)
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	4a98      	ldr	r2, [pc, #608]	; (8002cf0 <spi_init+0x270>)
 8002a90:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002a94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <spi_init+0x2c>
		p_spix->CR1 |= 1 << BIDIMODE_EN_DI_BIT_POSITION_CR1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e005      	b.n	8002ab8 <spi_init+0x38>
	else
		p_spix->CR1 &= ~(1 << BIDIMODE_EN_DI_BIT_POSITION_CR1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]


	// Software slave management
	if (spi_x[channel].software_slave_mngmt)
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	4a8d      	ldr	r2, [pc, #564]	; (8002cf0 <spi_init+0x270>)
 8002abc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002ac0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <spi_init+0x58>
		p_spix->CR1 |= 1 << SW_SALVE_MGMNT_BIT_POSITION_CR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e005      	b.n	8002ae4 <spi_init+0x64>
	else
		p_spix->CR1 &= ~(1 << SW_SALVE_MGMNT_BIT_POSITION_CR1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]

	// Error Interrupt EN DI
	if (spi_x[channel].error_interrupt_en_or_di)
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	4a82      	ldr	r2, [pc, #520]	; (8002cf0 <spi_init+0x270>)
 8002ae8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002aec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <spi_init+0x84>
		p_spix->CR2 |= 1 << ERR_INTERRUPT_EN_DI_BIT_POSITION;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e005      	b.n	8002b10 <spi_init+0x90>
	else
		p_spix->CR2 &= ~(1 << ERR_INTERRUPT_EN_DI_BIT_POSITION);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 0220 	bic.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	605a      	str	r2, [r3, #4]

	// RXNE Interrupt EN DI
	if (spi_x[channel].rxne_interrupt_en_or_di)
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <spi_init+0x270>)
 8002b14:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002b18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <spi_init+0xb0>
		p_spix->CR2 |= 1 << RXNE_INTERRUPT_EN_DI_BIT_POSITION;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e005      	b.n	8002b3c <spi_init+0xbc>
	else
		p_spix->CR2 &= ~(1 << RXNE_INTERRUPT_EN_DI_BIT_POSITION);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	605a      	str	r2, [r3, #4]

	// TX Interrupt EN DI
	if (spi_x[channel].txe_interrupt_en_or_di)
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	4a6c      	ldr	r2, [pc, #432]	; (8002cf0 <spi_init+0x270>)
 8002b40:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002b44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <spi_init+0xdc>
		p_spix->CR2 |= 1 << TX_INTERRUPT_EN_DI_BIT_POSITION;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e005      	b.n	8002b68 <spi_init+0xe8>
	else
		p_spix->CR2 &= ~(1 << TX_INTERRUPT_EN_DI_BIT_POSITION);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	605a      	str	r2, [r3, #4]


	// TX DMA EN DI
	if (spi_x[channel].tx_dma_en)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	4a61      	ldr	r2, [pc, #388]	; (8002cf0 <spi_init+0x270>)
 8002b6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002b70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <spi_init+0x108>
		p_spix->CR2 |= 1 << TX_DMA_EN_DI_BIT_POSITION;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e005      	b.n	8002b94 <spi_init+0x114>
	else
		p_spix->CR2 &= ~(1 << TX_DMA_EN_DI_BIT_POSITION);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 0202 	bic.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]

	// RXNE DMA EN DI
	if (spi_x[channel].rx_dma_en)
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	4a56      	ldr	r2, [pc, #344]	; (8002cf0 <spi_init+0x270>)
 8002b98:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002b9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <spi_init+0x134>
		p_spix->CR2 |= 1 << RX_DMA_EN_DI_BIT_POSITION;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e005      	b.n	8002bc0 <spi_init+0x140>
	else
		p_spix->CR2 &= ~(1 << RX_DMA_EN_DI_BIT_POSITION);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 0201 	bic.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

	//Baudrate
	p_spix->CR1 &= ~(0x07 << BAUD_RATE_CONTROL_BIT_POSITION_CR1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
	p_spix->CR1 |= (spi_x[channel].baudrate << BAUD_RATE_CONTROL_BIT_POSITION_CR1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4947      	ldr	r1, [pc, #284]	; (8002cf0 <spi_init+0x270>)
 8002bd4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002bd8:	f3c2 12c2 	ubfx	r2, r2, #7, #3
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	00d2      	lsls	r2, r2, #3
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]

	// CPOL
	if (spi_x[channel].cpol)
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	4a41      	ldr	r2, [pc, #260]	; (8002cf0 <spi_init+0x270>)
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <spi_init+0x188>
		p_spix->CR1 |= 1 << CPOL_BIT_POSITION_CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e005      	b.n	8002c14 <spi_init+0x194>
	else
		p_spix->CR1 &= ~(1 << CPOL_BIT_POSITION_CR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0202 	bic.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	601a      	str	r2, [r3, #0]

	//CPHA
	if (spi_x[channel].cpha)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <spi_init+0x270>)
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <spi_init+0x1b6>
		p_spix->CR1 |= 1 << CPHA_BIT_POSITION_CR1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e005      	b.n	8002c42 <spi_init+0x1c2>
	else
		p_spix->CR1 &= ~(1 << CPHA_BIT_POSITION_CR1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]


	// Master select
	if (spi_x[channel].master_selection)
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <spi_init+0x270>)
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <spi_init+0x1e4>
		p_spix->CR1 |= 1 << MASTER_SELECTION_BIT_POSITION_CR1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e005      	b.n	8002c70 <spi_init+0x1f0>
	else
		p_spix->CR1 &= ~(1 << MASTER_SELECTION_BIT_POSITION_CR1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 0204 	bic.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]

	//First bit out
	if (spi_x[channel].first_bit_out)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <spi_init+0x270>)
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <spi_init+0x212>
		p_spix->CR1 |= 1 << LSB_FIRST_BIT_POSITION_CR1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <spi_init+0x21e>
	else
		p_spix->CR1 &= ~(1 << LSB_FIRST_BIT_POSITION_CR1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]

	//Frame Length
	if (spi_x[channel].frame_length)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <spi_init+0x270>)
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <spi_init+0x240>
		p_spix->CR1 |= 1 << DATA_FRAME_FORMAT_BIT_POSITION_CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e005      	b.n	8002ccc <spi_init+0x24c>
	else
		p_spix->CR1 &= ~(1 << DATA_FRAME_FORMAT_BIT_POSITION_CR1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]

	//Rx_only
	if (spi_x[channel].rx_only)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <spi_init+0x270>)
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <spi_init+0x274>
		p_spix->CR1 |= 1 << RXONLY_BIT_POSITION_CR1;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e008      	b.n	8002d00 <spi_init+0x280>
 8002cee:	bf00      	nop
 8002cf0:	200001bc 	.word	0x200001bc
	else
		p_spix->CR1 &= ~(1 << RXONLY_BIT_POSITION_CR1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
	//ssi_pin_select(SPI1,SET);
	p_spix->CR2 |= (1 << 2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	605a      	str	r2, [r3, #4]
	spi_en_di(p_spix,ENABLE);
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f831 	bl	8002d76 <spi_en_di>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <data_write>:
{
	GPIOA->BSRR |= (1 << 20);
}

void data_write(spix_regdef_t *p_spix,uint32_t data)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
	p_spix->DR = data;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <data_read>:

uint8_t data_read(spix_regdef_t *p_spix)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	return (p_spix->DR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	b2db      	uxtb	r3, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <waite_for_sr_flag_to_set>:

void waite_for_sr_flag_to_set(spix_regdef_t *p_spix,uint8_t flag)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
	while(!get_sr_flag_status(p_spix,flag));
 8002d5a:	bf00      	nop
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f823 	bl	8002dac <get_sr_flag_status>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f7      	beq.n	8002d5c <waite_for_sr_flag_to_set+0xe>
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <spi_en_di>:
		p_spix->CR1 |= (1 << INTERNAL_SLAVE_SELECT_BIT_POSITION_CR1);
	else
		p_spix->CR1 &= ~(1 << INTERNAL_SLAVE_SELECT_BIT_POSITION_CR1);
}
void spi_en_di(spix_regdef_t *p_spix, uint8_t en_or_di)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
	if (en_or_di)
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <spi_en_di+0x20>
	{
		p_spix->CR1 |= 1 << SPI_EN_DI_BIT_POSTION_CR1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		p_spix->CR1 &= ~(1 << SPI_EN_DI_BIT_POSTION_CR1);
	}
}
 8002d94:	e005      	b.n	8002da2 <spi_en_di+0x2c>
		p_spix->CR1 &= ~(1 << SPI_EN_DI_BIT_POSTION_CR1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <get_sr_flag_status>:

uint8_t get_sr_flag_status(spix_regdef_t *p_spix,uint8_t flag)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
	if(p_spix->SR & flag)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <get_sr_flag_status+0x1c>
	{
		return 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <get_sr_flag_status+0x1e>
	}
	else
	{
		return 0;
 8002dc8:	2300      	movs	r3, #0
	}
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <read_id>:

#include "bmp280.h"


uint8_t read_id()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	uint16_t data_hold = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	80fb      	strh	r3, [r7, #6]
	//spi_1_slave_select(); // Start Communication
	GPIOA->ODR &= ~(1 << 4);
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <read_id+0x58>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <read_id+0x58>)
 8002de4:	f023 0310 	bic.w	r3, r3, #16
 8002de8:	60d3      	str	r3, [r2, #12]
	waite_for_sr_flag_to_set(SPI1,FLAG_TXE);
 8002dea:	2102      	movs	r1, #2
 8002dec:	4810      	ldr	r0, [pc, #64]	; (8002e30 <read_id+0x5c>)
 8002dee:	f7ff ffae 	bl	8002d4e <waite_for_sr_flag_to_set>
	data_write(SPI1,0xFA); // 0xD0 is the ID adddress. But we want to read the data hence MSB to 1 for read. for write access it would be 0x50
 8002df2:	21fa      	movs	r1, #250	; 0xfa
 8002df4:	480e      	ldr	r0, [pc, #56]	; (8002e30 <read_id+0x5c>)
 8002df6:	f7ff ff91 	bl	8002d1c <data_write>
	waite_for_sr_flag_to_set(SPI1,FLAG_RXNE);
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <read_id+0x5c>)
 8002dfe:	f7ff ffa6 	bl	8002d4e <waite_for_sr_flag_to_set>
	data_hold = data_read(SPI1) ;
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <read_id+0x5c>)
 8002e04:	f7ff ff97 	bl	8002d36 <data_read>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	80fb      	strh	r3, [r7, #6]
	waite_for_sr_flag_to_set(SPI1,FLAG_TXE);
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <read_id+0x5c>)
 8002e10:	f7ff ff9d 	bl	8002d4e <waite_for_sr_flag_to_set>
	//data_write(SPI1,0xFF);
	//waite_for_sr_flag_to_set(SPI1,FLAG_RXNE);
	//data_hold = data_read(SPI1);
	//GPIOA->BSRR |= (1 << 4);
	GPIOA->ODR |= (1 << 4);
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <read_id+0x58>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <read_id+0x58>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	60d3      	str	r3, [r2, #12]
	return data_hold;
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	b2db      	uxtb	r3, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40010800 	.word	0x40010800
 8002e30:	40013000 	.word	0x40013000

08002e34 <main>:

#define LED_ON() 			io_set_out(IO_TEST_LED, HIGH);
#define LED_OFF() 			io_set_out(IO_TEST_LED, LOW);

int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0

	uint8_t bmp280_id;
	mcu_init();
 8002e3a:	f7ff fdb5 	bl	80029a8 <mcu_init>
	GPIOA->ODR |= (1 << 4);
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <main+0x28>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <main+0x28>)
 8002e44:	f043 0310 	orr.w	r3, r3, #16
 8002e48:	60d3      	str	r3, [r2, #12]
	bmp280_id = read_id();
 8002e4a:	f7ff ffc3 	bl	8002dd4 <read_id>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	LED_OFF();
 8002e52:	2100      	movs	r1, #0
 8002e54:	202d      	movs	r0, #45	; 0x2d
 8002e56:	f7fe fd4f 	bl	80018f8 <io_set_out>

	while(1)
 8002e5a:	e7fe      	b.n	8002e5a <main+0x26>
 8002e5c:	40010800 	.word	0x40010800

08002e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <LoopForever+0xe>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <LoopForever+0x16>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e8e:	f000 f811 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e92:	f7ff ffcf 	bl	8002e34 <main>

08002e96 <LoopForever>:

LoopForever:
    b LoopForever
 8002e96:	e7fe      	b.n	8002e96 <LoopForever>
  ldr   r0, =_estack
 8002e98:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8002ea4:	08002f1c 	.word	0x08002f1c
  ldr r2, =_sbss
 8002ea8:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8002eac:	200003a4 	.word	0x200003a4

08002eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC1_2_IRQHandler>
	...

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	4d0c      	ldr	r5, [pc, #48]	; (8002eec <__libc_init_array+0x38>)
 8002eba:	4c0d      	ldr	r4, [pc, #52]	; (8002ef0 <__libc_init_array+0x3c>)
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	f000 f81a 	bl	8002efc <_init>
 8002ec8:	2600      	movs	r6, #0
 8002eca:	4d0a      	ldr	r5, [pc, #40]	; (8002ef4 <__libc_init_array+0x40>)
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <__libc_init_array+0x44>)
 8002ece:	1b64      	subs	r4, r4, r5
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08002f14 	.word	0x08002f14
 8002ef0:	08002f14 	.word	0x08002f14
 8002ef4:	08002f14 	.word	0x08002f14
 8002ef8:	08002f18 	.word	0x08002f18

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
